[InitOnceInitialize]
1=PINIT_ONCE InitOnce
ParamCount=1
@=InitOnceInitialize(PINIT_ONCE InitOnce);
[InitOnceExecuteOnce]
1=PINIT_ONCE InitOnce
2=PINIT_ONCE PINIT_ONCE_FNInitFn
3=PVOID Parameter
4=LPVOID *Context
ParamCount=4
@=InitOnceExecuteOnce(PINIT_ONCE InitOnce, PINIT_ONCE PINIT_ONCE_FNInitFn, PVOID Parameter, LPVOID *Context);
[InitOnceBeginInitialize]
1=LPINIT_ONCE lpInitOnce
2=DWORD dwFlags
3=PBOOL fPending
4=LPVOID *lpContext
ParamCount=4
@=InitOnceBeginInitialize(LPINIT_ONCE lpInitOnce, DWORD dwFlags, PBOOL fPending, LPVOID *lpContext);
[InitOnceComplete]
1=LPINIT_ONCE lpInitOnce
2=DWORD dwFlags
3=LPVOID lpContext
ParamCount=3
@=InitOnceComplete(LPINIT_ONCE lpInitOnce, DWORD dwFlags, LPVOID lpContext);
[InitializeSRWLock]
1=PSRWLOCK SRWLock
ParamCount=1
@=InitializeSRWLock(PSRWLOCK SRWLock);
[ReleaseSRWLockExclusive]
1=PSRWLOCK SRWLock
ParamCount=1
@=ReleaseSRWLockExclusive(PSRWLOCK SRWLock);
[ReleaseSRWLockShared]
1=PSRWLOCK SRWLock
ParamCount=1
@=ReleaseSRWLockShared(PSRWLOCK SRWLock);
[AcquireSRWLockExclusive]
1=PSRWLOCK SRWLock
ParamCount=1
@=AcquireSRWLockExclusive(PSRWLOCK SRWLock);
[AcquireSRWLockShared]
1=PSRWLOCK SRWLock
ParamCount=1
@=AcquireSRWLockShared(PSRWLOCK SRWLock);
[TryAcquireSRWLockExclusive]
1=PSRWLOCK SRWLock
ParamCount=1
@=TryAcquireSRWLockExclusive(PSRWLOCK SRWLock);
[TryAcquireSRWLockShared]
1=PSRWLOCK SRWLock
ParamCount=1
@=TryAcquireSRWLockShared(PSRWLOCK SRWLock);
[InitializeConditionVariable]
1=PCONDITION_VARIABLE ConditionVariable
ParamCount=1
@=InitializeConditionVariable(PCONDITION_VARIABLE ConditionVariable);
[WakeConditionVariable]
1=PCONDITION_VARIABLE ConditionVariable
ParamCount=1
@=WakeConditionVariable(PCONDITION_VARIABLE ConditionVariable);
[WakeAllConditionVariable]
1=PCONDITION_VARIABLE ConditionVariable
ParamCount=1
@=WakeAllConditionVariable(PCONDITION_VARIABLE ConditionVariable);
[SleepConditionVariableCS]
1=PCONDITION_VARIABLE ConditionVariable
2=PCRITICAL_SECTION CriticalSection
3=DWORD dwMilliseconds
ParamCount=3
@=SleepConditionVariableCS(PCONDITION_VARIABLE ConditionVariable, PCRITICAL_SECTION CriticalSection, DWORD dwMilliseconds);
[SleepConditionVariableSRW]
1=PCONDITION_VARIABLE ConditionVariable
2=PSRWLOCK SRWLock
3=DWORD dwMilliseconds
4=ULONG Flags
ParamCount=4
@=SleepConditionVariableSRW(PCONDITION_VARIABLE ConditionVariable, PSRWLOCK SRWLock, DWORD dwMilliseconds, ULONG Flags);
[EncodePointer]
1=PVOID Ptr
ParamCount=1
@=EncodePointer(PVOID Ptr);
[DecodePointer]
1=PVOID Ptr
ParamCount=1
@=DecodePointer(PVOID Ptr);
[EncodeSystemPointer]
1=PVOID Ptr
ParamCount=1
@=EncodeSystemPointer(PVOID Ptr);
[DecodeSystemPointer]
1=PVOID Ptr
ParamCount=1
@=DecodeSystemPointer(PVOID Ptr);
[GetFreeSpace]
1=UINT
ParamCount=1
@=GetFreeSpace(UINT);
[InterlockedIncrement]
1=LONG volatile*lpAddend
ParamCount=1
@=InterlockedIncrement(LONG volatile*lpAddend);
[InterlockedDecrement]
1=LONG volatile*lpAddend
ParamCount=1
@=InterlockedDecrement(LONG volatile*lpAddend);
[InterlockedExchange]
1=LONG volatile*Target
2=LONG Value
ParamCount=2
@=InterlockedExchange(LONG volatile*Target, LONG Value);
[InterlockedExchangeAdd]
1=LONG volatile*Addend
2=LONG Value
ParamCount=2
@=InterlockedExchangeAdd(LONG volatile*Addend, LONG Value);
[InterlockedCompareExchange]
1=LONG volatile*Destination
2=LONG Exchange
3=LONG Comperand
ParamCount=3
@=InterlockedCompareExchange(LONG volatile*Destination, LONG Exchange, LONG Comperand);
[InterlockedCompareExchange64]
1=LONGLONG volatile*Destination
2=LONGLONG Exchange
3=LONGLONG Comperand
ParamCount=3
@=InterlockedCompareExchange64(LONGLONG volatile*Destination, LONGLONG Exchange, LONGLONG Comperand);
[InitializeSListHead]
1=PSLIST_HEADER ListHead
ParamCount=1
@=InitializeSListHead(PSLIST_HEADER ListHead);
[InterlockedPopEntrySList]
1=PSLIST_HEADER ListHead
ParamCount=1
@=InterlockedPopEntrySList(PSLIST_HEADER ListHead);
[InterlockedPushEntrySList]
1=PSLIST_HEADER ListHead
2=PSLIST_ENTRY ListEntry
ParamCount=2
@=InterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
[InterlockedFlushSList]
1=PSLIST_HEADER ListHead
ParamCount=1
@=InterlockedFlushSList(PSLIST_HEADER ListHead);
[QueryDepthSList]
1=PSLIST_HEADER ListHead
ParamCount=1
@=QueryDepthSList(PSLIST_HEADER ListHead);
[FreeResource]
1=HGLOBAL hResData
ParamCount=1
@=FreeResource(HGLOBAL hResData);
[LockResource]
1=HGLOBAL hResData
ParamCount=1
@=LockResource(HGLOBAL hResData);
[WinMain]
1=HINSTANCE hInstance
2=HINSTANCE hPrevInstance
3=LPSTR lpCmdLine
4=int nShowCmd
ParamCount=4
@=WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
[wWinMain]
1=HINSTANCE hInstance
2=HINSTANCE hPrevInstance
3=LPWSTR lpCmdLine
4=int nShowCmd
ParamCount=4
@=wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd);
[FreeLibrary]
1=HMODULE hLibModule
ParamCount=1
@=FreeLibrary(HMODULE hLibModule);
[FreeLibraryAndExitThread]
1=HMODULE hLibModule
2=DWORD dwExitCode
ParamCount=2
@=FreeLibraryAndExitThread(HMODULE hLibModule, DWORD dwExitCode);
[DisableThreadLibraryCalls]
1=HMODULE hLibModule
ParamCount=1
@=DisableThreadLibraryCalls(HMODULE hLibModule);
[GetProcAddress]
1=HMODULE hModule
2=LPCSTR lpProcName
ParamCount=2
@=GetProcAddress(HMODULE hModule, LPCSTR lpProcName);
[GetVersion]
ParamCount=0
@=GetVersion();
[GlobalAlloc]
1=UINT uFlags
2=SIZE_T dwBytes
ParamCount=2
@=GlobalAlloc(UINT uFlags, SIZE_T dwBytes);
[GlobalReAlloc]
1=HGLOBAL hMem
2=SIZE_T dwBytes
3=UINT uFlags
ParamCount=3
@=GlobalReAlloc(HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
[GlobalSize]
1=HGLOBAL hMem
ParamCount=1
@=GlobalSize(HGLOBAL hMem);
[GlobalFlags]
1=HGLOBAL hMem
ParamCount=1
@=GlobalFlags(HGLOBAL hMem);
[GlobalLock]
1=HGLOBAL hMem
ParamCount=1
@=GlobalLock(HGLOBAL hMem);
[GlobalHandle]
1=LPCVOID pMem
ParamCount=1
@=GlobalHandle(LPCVOID pMem);
[GlobalUnlock]
1=HGLOBAL hMem
ParamCount=1
@=GlobalUnlock(HGLOBAL hMem);
[GlobalFree]
1=HGLOBAL hMem
ParamCount=1
@=GlobalFree(HGLOBAL hMem);
[GlobalCompact]
1=DWORD dwMinFree
ParamCount=1
@=GlobalCompact(DWORD dwMinFree);
[GlobalFix]
1=HGLOBAL hMem
ParamCount=1
@=GlobalFix(HGLOBAL hMem);
[GlobalUnfix]
1=HGLOBAL hMem
ParamCount=1
@=GlobalUnfix(HGLOBAL hMem);
[GlobalWire]
1=HGLOBAL hMem
ParamCount=1
@=GlobalWire(HGLOBAL hMem);
[GlobalUnWire]
1=HGLOBAL hMem
ParamCount=1
@=GlobalUnWire(HGLOBAL hMem);
[GlobalMemoryStatus]
1=LPMEMORYSTATUS lpBuffer
ParamCount=1
@=GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer);
[GlobalMemoryStatusEx]
1=LPMEMORYSTATUSEX lpBuffer
ParamCount=1
@=GlobalMemoryStatusEx(LPMEMORYSTATUSEX lpBuffer);
[LocalAlloc]
1=UINT uFlags
2=SIZE_T uBytes
ParamCount=2
@=LocalAlloc(UINT uFlags, SIZE_T uBytes);
[LocalReAlloc]
1=HLOCAL hMem
2=SIZE_T uBytes
3=UINT uFlags
ParamCount=3
@=LocalReAlloc(HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
[LocalLock]
1=HLOCAL hMem
ParamCount=1
@=LocalLock(HLOCAL hMem);
[LocalHandle]
1=LPCVOID pMem
ParamCount=1
@=LocalHandle(LPCVOID pMem);
[LocalUnlock]
1=HLOCAL hMem
ParamCount=1
@=LocalUnlock(HLOCAL hMem);
[LocalSize]
1=HLOCAL hMem
ParamCount=1
@=LocalSize(HLOCAL hMem);
[LocalFlags]
1=HLOCAL hMem
ParamCount=1
@=LocalFlags(HLOCAL hMem);
[LocalFree]
1=HLOCAL hMem
ParamCount=1
@=LocalFree(HLOCAL hMem);
[LocalShrink]
1=HLOCAL hMem
2=UINT cbNewSize
ParamCount=2
@=LocalShrink(HLOCAL hMem, UINT cbNewSize);
[LocalCompact]
1=UINT uMinFree
ParamCount=1
@=LocalCompact(UINT uMinFree);
[FlushInstructionCache]
1=HANDLE hProcess
2=LPCVOID lpBaseAddress
3=SIZE_T dwSize
ParamCount=3
@=FlushInstructionCache(HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize);
[FlushProcessWriteBuffers]
ParamCount=0
@=FlushProcessWriteBuffers();
[QueryThreadCycleTime]
1=HANDLE ThreadHandle
2=PULONG64 CycleTime
ParamCount=2
@=QueryThreadCycleTime(HANDLE ThreadHandle, PULONG64 CycleTime);
[QueryProcessCycleTime]
1=HANDLE ProcessHandle
2=PULONG64 CycleTime
ParamCount=2
@=QueryProcessCycleTime(HANDLE ProcessHandle, PULONG64 CycleTime);
[QueryIdleProcessorCycleTime]
1=PULONG BufferLength
2=PULONG64 ProcessorIdleCycleTime
ParamCount=2
@=QueryIdleProcessorCycleTime(PULONG BufferLength, PULONG64 ProcessorIdleCycleTime);
[QueryIdleProcessorCycleTimeEx]
1=USHORT Group
2=PULONG BufferLength
3=PULONG64 ProcessorIdleCycleTime
ParamCount=3
@=QueryIdleProcessorCycleTimeEx(USHORT Group, PULONG BufferLength, PULONG64 ProcessorIdleCycleTime);
[QueryUnbiasedInterruptTime]
1=PULONGLONG UnbiasedTime
ParamCount=1
@=QueryUnbiasedInterruptTime(PULONGLONG UnbiasedTime);
[GetProcessorSystemCycleTime]
1=USHORT Group
2=PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer
3=PDWORD ReturnedLength
ParamCount=3
@=GetProcessorSystemCycleTime(USHORT Group, PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer, PDWORD ReturnedLength);
[VirtualAlloc]
1=LPVOID lpAddress
2=SIZE_T dwSize
3=DWORD flAllocationType
4=DWORD flProtect
ParamCount=4
@=VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
[VirtualFree]
1=LPVOID lpAddress
2=SIZE_T dwSize
3=DWORD dwFreeType
ParamCount=3
@=VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
[VirtualProtect]
1=LPVOID lpAddress
2=SIZE_T dwSize
3=DWORD flNewProtect
4=PDWORD lpflOldProtect
ParamCount=4
@=VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
[VirtualQuery]
1=LPCVOID lpAddress
2=PMEMORY_BASIC_INFORMATION lpBuffer
3=SIZE_T dwLength
ParamCount=3
@=VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
[VirtualAllocEx]
1=HANDLE hProcess
2=LPVOID lpAddress
3=SIZE_T dwSize
4=DWORD flAllocationType
5=DWORD flProtect
ParamCount=5
@=VirtualAllocEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
[VirtualAllocExNuma]
1=HANDLE hProcess
2=LPVOID lpAddress
3=SIZE_T dwSize
4=DWORD flAllocationType
5=DWORD flProtect
6=DWORD nndPreferred
ParamCount=6
@=VirtualAllocExNuma(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect, DWORD nndPreferred);
[GetWriteWatch]
1=DWORD dwFlags
2=PVOID lpBaseAddress
3=SIZE_T dwRegionSize
4=PVOID *lpAddresses
5=ULONG_PTR *lpdwCount
6=PULONG lpdwGranularity
ParamCount=6
@=GetWriteWatch(DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID *lpAddresses, ULONG_PTR *lpdwCount, PULONG lpdwGranularity);
[ResetWriteWatch]
1=LPVOID lpBaseAddress
2=SIZE_T dwRegionSize
ParamCount=2
@=ResetWriteWatch(LPVOID lpBaseAddress, SIZE_T dwRegionSize);
[GetLargePageMinimum]
ParamCount=0
@=GetLargePageMinimum();
[EnumSystemFirmwareTables]
1=DWORD FirmwareTableProviderSignature
2=PVOID pFirmwareTableEnumBuffer
3=DWORD BufferSize
ParamCount=3
@=EnumSystemFirmwareTables(DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize);
[GetSystemFirmwareTable]
1=DWORD FirmwareTableProviderSignature
2=DWORD FirmwareTableID
3=PVOID pFirmwareTableBuffer
4=DWORD BufferSize
ParamCount=4
@=GetSystemFirmwareTable(DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize);
[GetPhysicallyInstalledSystemMemory]
1=PULONGLONG TotalMemoryInKilobytes
ParamCount=1
@=GetPhysicallyInstalledSystemMemory(PULONGLONG TotalMemoryInKilobytes);
[VirtualFreeEx]
1=HANDLE hProcess
2=LPVOID lpAddress
3=SIZE_T dwSize
4=DWORD dwFreeType
ParamCount=4
@=VirtualFreeEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
[VirtualProtectEx]
1=HANDLE hProcess
2=LPVOID lpAddress
3=SIZE_T dwSize
4=DWORD flNewProtect
5=PDWORD lpflOldProtect
ParamCount=5
@=VirtualProtectEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
[VirtualQueryEx]
1=HANDLE hProcess
2=LPCVOID lpAddress
3=PMEMORY_BASIC_INFORMATION lpBuffer
4=SIZE_T dwLength
ParamCount=4
@=VirtualQueryEx(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
[HeapCreate]
1=DWORD flOptions
2=SIZE_T dwInitialSize
3=SIZE_T dwMaximumSize
ParamCount=3
@=HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
[HeapDestroy]
1=HANDLE hHeap
ParamCount=1
@=HeapDestroy(HANDLE hHeap);
[HeapAlloc]
1=HANDLE hHeap
2=DWORD dwFlags
3=SIZE_T dwBytes
ParamCount=3
@=HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
[HeapReAlloc]
1=HANDLE hHeap
2=DWORD dwFlags
3=LPVOID lpMem
4=SIZE_T dwBytes
ParamCount=4
@=HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
[HeapFree]
1=HANDLE hHeap
2=DWORD dwFlags
3=DWORD LPVOIDlpMem
ParamCount=3
@=HeapFree(HANDLE hHeap, DWORD dwFlags, DWORD LPVOIDlpMem);
[HeapSize]
1=HANDLE hHeap
2=DWORD dwFlags
3=LPCVOID lpMem
ParamCount=3
@=HeapSize(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
[HeapValidate]
1=HANDLE hHeap
2=DWORD dwFlags
3=LPCVOID lpMem
ParamCount=3
@=HeapValidate(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
[HeapCompact]
1=HANDLE hHeap
2=DWORD dwFlags
ParamCount=2
@=HeapCompact(HANDLE hHeap, DWORD dwFlags);
[GetProcessHeap]
ParamCount=0
@=GetProcessHeap();
[GetProcessHeaps]
1=DWORD NumberOfHeaps
2=PHANDLE ProcessHeaps
ParamCount=2
@=GetProcessHeaps(DWORD NumberOfHeaps, PHANDLE ProcessHeaps);
[HeapLock]
1=HANDLE hHeap
ParamCount=1
@=HeapLock(HANDLE hHeap);
[HeapUnlock]
1=HANDLE hHeap
ParamCount=1
@=HeapUnlock(HANDLE hHeap);
[HeapWalk]
1=HANDLE hHeap
2=LPPROCESS_HEAP_ENTRY lpEntry
ParamCount=2
@=HeapWalk(HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
[HeapSetInformation]
1=HANDLE HeapHandle
2=HEAP_INFORMATION_CLASS HeapInformationClass
3=PVOID HeapInformation
4=SIZE_T HeapInformationLength
ParamCount=4
@=HeapSetInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
[HeapQueryInformation]
1=HANDLE HeapHandle
2=HEAP_INFORMATION_CLASS HeapInformationClass
3=PVOID HeapInformation
4=SIZE_T HeapInformationLength
5=PSIZE_T ReturnLength
ParamCount=5
@=HeapQueryInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);
[GetBinaryTypeA]
1=LPCSTR lpApplicationName
2=LPDWORD lpBinaryType
ParamCount=2
@=GetBinaryTypeA(LPCSTR lpApplicationName, LPDWORD lpBinaryType);
[GetBinaryTypeW]
1=LPCWSTR lpApplicationName
2=LPDWORD lpBinaryType
ParamCount=2
@=GetBinaryTypeW(LPCWSTR lpApplicationName, LPDWORD lpBinaryType);
[GetShortPathNameA]
1=LPCSTR lpszLongPath
2=LPSTR lpszShortPath
3=DWORD cchBuffer
ParamCount=3
@=GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer);
[GetShortPathNameW]
1=LPCWSTR lpszLongPath
2=LPWSTR lpszShortPath
3=DWORD cchBuffer
ParamCount=3
@=GetShortPathNameW(LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
[GetLongPathNameA]
1=LPCSTR lpszShortPath
2=LPSTR lpszLongPath
3=DWORD cchBuffer
ParamCount=3
@=GetLongPathNameA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer);
[GetLongPathNameW]
1=LPCWSTR lpszShortPath
2=LPWSTR lpszLongPath
3=DWORD cchBuffer
ParamCount=3
@=GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
[GetLongPathNameTransactedA]
1=LPCSTR lpszShortPath
2=LPSTR lpszLongPath
3=DWORD cchBuffer
4=HANDLE hTransaction
ParamCount=4
@=GetLongPathNameTransactedA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction);
[GetLongPathNameTransactedW]
1=LPCWSTR lpszShortPath
2=LPWSTR lpszLongPath
3=DWORD cchBuffer
4=HANDLE hTransaction
ParamCount=4
@=GetLongPathNameTransactedW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction);
[GetProcessAffinityMask]
1=HANDLE hProcess
2=PDWORD_PTR lpProcessAffinityMask
3=PDWORD_PTR lpSystemAffinityMask
ParamCount=3
@=GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask);
[SetProcessAffinityMask]
1=HANDLE hProcess
2=DWORD_PTR dwProcessAffinityMask
ParamCount=2
@=SetProcessAffinityMask(HANDLE hProcess, DWORD_PTR dwProcessAffinityMask);
[GetProcessGroupAffinity]
1=HANDLE hProcess
2=PUSHORT GroupCount
3=PUSHORT GroupArray
ParamCount=3
@=GetProcessGroupAffinity(HANDLE hProcess, PUSHORT GroupCount, PUSHORT GroupArray);
[GetProcessHandleCount]
1=HANDLE hProcess
2=PDWORD pdwHandleCount
ParamCount=2
@=GetProcessHandleCount(HANDLE hProcess, PDWORD pdwHandleCount);
[GetProcessTimes]
1=HANDLE hProcess
2=LPFILETIME lpCreationTime
3=LPFILETIME lpExitTime
4=LPFILETIME lpKernelTime
5=LPFILETIME lpUserTime
ParamCount=5
@=GetProcessTimes(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
[GetProcessIoCounters]
1=HANDLE hProcess
2=PIO_COUNTERS lpIoCounters
ParamCount=2
@=GetProcessIoCounters(HANDLE hProcess, PIO_COUNTERS lpIoCounters);
[GetProcessWorkingSetSize]
1=HANDLE hProcess
2=PSIZE_T lpMinimumWorkingSetSize
3=PSIZE_T lpMaximumWorkingSetSize
ParamCount=3
@=GetProcessWorkingSetSize(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize);
[GetProcessWorkingSetSizeEx]
1=HANDLE hProcess
2=PSIZE_T lpMinimumWorkingSetSize
3=PSIZE_T lpMaximumWorkingSetSize
4=PDWORD Flags
ParamCount=4
@=GetProcessWorkingSetSizeEx(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags);
[SetProcessWorkingSetSize]
1=HANDLE hProcess
2=SIZE_T dwMinimumWorkingSetSize
3=SIZE_T dwMaximumWorkingSetSize
ParamCount=3
@=SetProcessWorkingSetSize(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize);
[SetProcessWorkingSetSizeEx]
1=HANDLE hProcess
2=SIZE_T dwMinimumWorkingSetSize
3=SIZE_T dwMaximumWorkingSetSize
4=DWORD Flags
ParamCount=4
@=SetProcessWorkingSetSizeEx(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags);
[SetProcessAffinityUpdateMode]
1=HANDLE hProcess
2=DWORD dwFlags
ParamCount=2
@=SetProcessAffinityUpdateMode(HANDLE hProcess, DWORD dwFlags);
[QueryProcessAffinityUpdateMode]
1=HANDLE hProcess
2=LPDWORD lpdwFlags
ParamCount=2
@=QueryProcessAffinityUpdateMode(HANDLE hProcess, LPDWORD lpdwFlags);
[OpenProcess]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=DWORD dwProcessId
ParamCount=3
@=OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
[GetCurrentProcess]
ParamCount=0
@=GetCurrentProcess();
[GetCurrentProcessId]
ParamCount=0
@=GetCurrentProcessId();
[ExitProcess]
1=UINT uExitCode
ParamCount=1
@=ExitProcess(UINT uExitCode);
[TerminateProcess]
1=HANDLE hProcess
2=UINT uExitCode
ParamCount=2
@=TerminateProcess(HANDLE hProcess, UINT uExitCode);
[GetExitCodeProcess]
1=HANDLE hProcess
2=LPDWORD lpExitCode
ParamCount=2
@=GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode);
[FatalExit]
1=int ExitCode
ParamCount=1
@=FatalExit(int ExitCode);
[GetEnvironmentStrings]
ParamCount=0
@=GetEnvironmentStrings();
[GetEnvironmentStringsW]
ParamCount=0
@=GetEnvironmentStringsW();
[SetEnvironmentStringsA]
1=VOID LPCHNewEnvironment
ParamCount=1
@=SetEnvironmentStringsA(VOID LPCHNewEnvironment);
[SetEnvironmentStringsW]
1=VOID LPWCHNewEnvironment
ParamCount=1
@=SetEnvironmentStringsW(VOID LPWCHNewEnvironment);
[FreeEnvironmentStringsA]
1=VOID LPCH
ParamCount=1
@=FreeEnvironmentStringsA(VOID LPCH);
[FreeEnvironmentStringsW]
1=VOID LPWCH
ParamCount=1
@=FreeEnvironmentStringsW(VOID LPWCH);
[RaiseException]
1=DWORD dwExceptionCode
2=DWORD dwExceptionFlags
3=DWORD nNumberOfArguments
4=ULONG_PTR *lpArguments
ParamCount=4
@=RaiseException(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, ULONG_PTR *lpArguments);
[RaiseFailFastException]
1=PEXCEPTION_RECORD pExceptionRecord
2=PCONTEXT pContextRecord
3=DWORD dwFlags
ParamCount=3
@=RaiseFailFastException(PEXCEPTION_RECORD pExceptionRecord, PCONTEXT pContextRecord, DWORD dwFlags);
[UnhandledExceptionFilter]
1=_EXCEPTION_POINTERS *ExceptionInfo
ParamCount=1
@=UnhandledExceptionFilter(_EXCEPTION_POINTERS *ExceptionInfo);
[SetUnhandledExceptionFilter]
1=LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
ParamCount=1
@=SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
[CreateFiber]
1=SIZE_T dwStackSize
2=LPFIBER_START_ROUTINE lpStartAddress
3=LPVOID lpParameter
ParamCount=3
@=CreateFiber(SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
[CreateFiberEx]
1=SIZE_T dwStackCommitSize
2=SIZE_T dwStackReserveSize
3=DWORD dwFlags
4=LPFIBER_START_ROUTINE lpStartAddress
5=LPVOID lpParameter
ParamCount=5
@=CreateFiberEx(SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
[DeleteFiber]
1=LPVOID lpFiber
ParamCount=1
@=DeleteFiber(LPVOID lpFiber);
[ConvertThreadToFiber]
1=LPVOID lpParameter
ParamCount=1
@=ConvertThreadToFiber(LPVOID lpParameter);
[ConvertThreadToFiberEx]
1=LPVOID lpParameter
2=DWORD dwFlags
ParamCount=2
@=ConvertThreadToFiberEx(LPVOID lpParameter, DWORD dwFlags);
[ConvertFiberToThread]
ParamCount=0
@=ConvertFiberToThread();
[IsThreadAFiber]
ParamCount=0
@=IsThreadAFiber();
[SwitchToFiber]
1=LPVOID lpFiber
ParamCount=1
@=SwitchToFiber(LPVOID lpFiber);
[SwitchToThread]
ParamCount=0
@=SwitchToThread();
[CreateUmsCompletionList]
1=PUMS_COMPLETION_LIST* UmsCompletionList
ParamCount=1
@=CreateUmsCompletionList(PUMS_COMPLETION_LIST* UmsCompletionList);
[DequeueUmsCompletionListItems]
1=PUMS_COMPLETION_LIST UmsCompletionList
2=DWORD WaitTimeOut
3=PUMS_CONTEXT* UmsThreadList
ParamCount=3
@=DequeueUmsCompletionListItems(PUMS_COMPLETION_LIST UmsCompletionList, DWORD WaitTimeOut, PUMS_CONTEXT* UmsThreadList);
[GetUmsCompletionListEvent]
1=PUMS_COMPLETION_LIST UmsCompletionList
2=PHANDLE UmsCompletionEvent
ParamCount=2
@=GetUmsCompletionListEvent(PUMS_COMPLETION_LIST UmsCompletionList, PHANDLE UmsCompletionEvent);
[ExecuteUmsThread]
1=PUMS_CONTEXT UmsThread
ParamCount=1
@=ExecuteUmsThread(PUMS_CONTEXT UmsThread);
[UmsThreadYield]
1=PVOID SchedulerParam
ParamCount=1
@=UmsThreadYield(PVOID SchedulerParam);
[DeleteUmsCompletionList]
1=PUMS_COMPLETION_LIST UmsCompletionList
ParamCount=1
@=DeleteUmsCompletionList(PUMS_COMPLETION_LIST UmsCompletionList);
[GetCurrentUmsThread]
ParamCount=0
@=GetCurrentUmsThread();
[GetNextUmsListItem]
1=PUMS_CONTEXT UmsContext
ParamCount=1
@=GetNextUmsListItem(PUMS_CONTEXT UmsContext);
[QueryUmsThreadInformation]
1=PUMS_CONTEXT UmsThread
2=UMS_THREAD_INFO_CLASS UmsThreadInfoClass
3=PVOID UmsThreadInformation
4=ULONG UmsThreadInformationLength
5=PULONG ReturnLength
ParamCount=5
@=QueryUmsThreadInformation(PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength, PULONG ReturnLength);
[SetUmsThreadInformation]
1=PUMS_CONTEXT UmsThread
2=UMS_THREAD_INFO_CLASS UmsThreadInfoClass
3=PVOID UmsThreadInformation
4=ULONG UmsThreadInformationLength
ParamCount=4
@=SetUmsThreadInformation(PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength);
[DeleteUmsThreadContext]
1=PUMS_CONTEXT UmsThread
ParamCount=1
@=DeleteUmsThreadContext(PUMS_CONTEXT UmsThread);
[CreateUmsThreadContext]
1=PUMS_CONTEXT *lpUmsThread
ParamCount=1
@=CreateUmsThreadContext(PUMS_CONTEXT *lpUmsThread);
[EnterUmsSchedulingMode]
1=PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
ParamCount=1
@=EnterUmsSchedulingMode(PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo);
[CreateThread]
1=LPSECURITY_ATTRIBUTES lpThreadAttributes
2=SIZE_T dwStackSize
3=LPTHREAD_START_ROUTINE lpStartAddress
4=LPTHREAD_START_ROUTINE LPVOIDlpParameter
5=DWORD dwCreationFlags
6=LPDWORD lpThreadId
ParamCount=6
@=CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPTHREAD_START_ROUTINE LPVOIDlpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
[CreateRemoteThread]
1=HANDLE hProcess
2=LPSECURITY_ATTRIBUTES lpThreadAttributes
3=SIZE_T dwStackSize
4=LPTHREAD_START_ROUTINE lpStartAddress
5=LPVOID lpParameter
6=DWORD dwCreationFlags
7=LPDWORD lpThreadId
ParamCount=7
@=CreateRemoteThread(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
[CreateRemoteThreadEx]
1=HANDLE hProcess
2=LPSECURITY_ATTRIBUTES lpThreadAttributes
3=SIZE_T dwStackSize
4=LPTHREAD_START_ROUTINE lpStartAddress
5=LPVOID lpParameter
6=DWORD dwCreationFlags
7=LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
8=LPDWORD lpThreadId
ParamCount=8
@=CreateRemoteThreadEx(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId);
[GetCurrentThread]
ParamCount=0
@=GetCurrentThread();
[GetCurrentThreadId]
ParamCount=0
@=GetCurrentThreadId();
[SetThreadStackGuarantee]
1=PULONG StackSizeInBytes
ParamCount=1
@=SetThreadStackGuarantee(PULONG StackSizeInBytes);
[GetProcessIdOfThread]
1=HANDLE Thread
ParamCount=1
@=GetProcessIdOfThread(HANDLE Thread);
[GetThreadId]
1=HANDLE Thread
ParamCount=1
@=GetThreadId(HANDLE Thread);
[GetProcessId]
1=HANDLE Process
ParamCount=1
@=GetProcessId(HANDLE Process);
[GetCurrentProcessorNumber]
ParamCount=0
@=GetCurrentProcessorNumber();
[GetCurrentProcessorNumberEx]
1=PPROCESSOR_NUMBER ProcNumber
ParamCount=1
@=GetCurrentProcessorNumberEx(PPROCESSOR_NUMBER ProcNumber);
[GetThreadGroupAffinity]
1=HANDLE hThread
2=PGROUP_AFFINITY GroupAffinity
ParamCount=2
@=GetThreadGroupAffinity(HANDLE hThread, PGROUP_AFFINITY GroupAffinity);
[SetThreadAffinityMask]
1=HANDLE hThread
2=DWORD_PTR dwThreadAffinityMask
ParamCount=2
@=SetThreadAffinityMask(HANDLE hThread, DWORD_PTR dwThreadAffinityMask);
[SetThreadGroupAffinity]
1=HANDLE hThread
2=GROUP_AFFINITY *GroupAffinity
3=PGROUP_AFFINITY PreviousGroupAffinity
ParamCount=3
@=SetThreadGroupAffinity(HANDLE hThread, GROUP_AFFINITY *GroupAffinity, PGROUP_AFFINITY PreviousGroupAffinity);
[SetThreadIdealProcessorEx]
1=HANDLE hThread
2=PPROCESSOR_NUMBER lpIdealProcessor
3=PPROCESSOR_NUMBER lpPreviousIdealProcessor
ParamCount=3
@=SetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor, PPROCESSOR_NUMBER lpPreviousIdealProcessor);
[GetThreadIdealProcessorEx]
1=HANDLE hThread
2=PPROCESSOR_NUMBER lpIdealProcessor
ParamCount=2
@=GetThreadIdealProcessorEx(HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor);
[SetThreadIdealProcessor]
1=HANDLE hThread
2=DWORD dwIdealProcessor
ParamCount=2
@=SetThreadIdealProcessor(HANDLE hThread, DWORD dwIdealProcessor);
[SetProcessDEPPolicy]
1=DWORD dwFlags
ParamCount=1
@=SetProcessDEPPolicy(DWORD dwFlags);
[GetProcessDEPPolicy]
1=HANDLE hProcess
2=LPDWORD lpFlags
3=PBOOL lpPermanent
ParamCount=3
@=GetProcessDEPPolicy(HANDLE hProcess, LPDWORD lpFlags, PBOOL lpPermanent);
[SetProcessPriorityBoost]
1=HANDLE hProcess
2=BOOL bDisablePriorityBoost
ParamCount=2
@=SetProcessPriorityBoost(HANDLE hProcess, BOOL bDisablePriorityBoost);
[GetProcessPriorityBoost]
1=HANDLE hProcess
2=PBOOL pDisablePriorityBoost
ParamCount=2
@=GetProcessPriorityBoost(HANDLE hProcess, PBOOL pDisablePriorityBoost);
[RequestWakeupLatency]
1=LATENCY_TIME latency
ParamCount=1
@=RequestWakeupLatency(LATENCY_TIME latency);
[IsSystemResumeAutomatic]
ParamCount=0
@=IsSystemResumeAutomatic();
[OpenThread]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=DWORD dwThreadId
ParamCount=3
@=OpenThread(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId);
[SetThreadPriority]
1=HANDLE hThread
2=int nPriority
ParamCount=2
@=SetThreadPriority(HANDLE hThread, int nPriority);
[SetThreadPriorityBoost]
1=HANDLE hThread
2=BOOL bDisablePriorityBoost
ParamCount=2
@=SetThreadPriorityBoost(HANDLE hThread, BOOL bDisablePriorityBoost);
[GetThreadPriorityBoost]
1=HANDLE hThread
2=PBOOL pDisablePriorityBoost
ParamCount=2
@=GetThreadPriorityBoost(HANDLE hThread, PBOOL pDisablePriorityBoost);
[GetThreadPriority]
1=HANDLE hThread
ParamCount=1
@=GetThreadPriority(HANDLE hThread);
[GetThreadTimes]
1=HANDLE hThread
2=LPFILETIME lpCreationTime
3=LPFILETIME lpExitTime
4=LPFILETIME lpKernelTime
5=LPFILETIME lpUserTime
ParamCount=5
@=GetThreadTimes(HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
[GetThreadIOPendingFlag]
1=HANDLE hThread
2=PBOOL lpIOIsPending
ParamCount=2
@=GetThreadIOPendingFlag(HANDLE hThread, PBOOL lpIOIsPending);
[ExitThread]
1=DWORD dwExitCode
ParamCount=1
@=ExitThread(DWORD dwExitCode);
[TerminateThread]
1=HANDLE hThread
2=DWORD dwExitCode
ParamCount=2
@=TerminateThread(HANDLE hThread, DWORD dwExitCode);
[GetExitCodeThread]
1=HANDLE hThread
2=LPDWORD lpExitCode
ParamCount=2
@=GetExitCodeThread(HANDLE hThread, LPDWORD lpExitCode);
[GetThreadSelectorEntry]
1=HANDLE hThread
2=DWORD dwSelector
3=LPLDT_ENTRY lpSelectorEntry
ParamCount=3
@=GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry);
[SetThreadExecutionState]
1=EXECUTION_STATE esFlags
ParamCount=1
@=SetThreadExecutionState(EXECUTION_STATE esFlags);
[PowerCreateRequest]
1=PREASON_CONTEXT Context
ParamCount=1
@=PowerCreateRequest(PREASON_CONTEXT Context);
[PowerSetRequest]
1=HANDLE PowerRequest
2=POWER_REQUEST_TYPE RequestType
ParamCount=2
@=PowerSetRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType);
[PowerClearRequest]
1=HANDLE PowerRequest
2=POWER_REQUEST_TYPE RequestType
ParamCount=2
@=PowerClearRequest(HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType);
[GetLastError]
ParamCount=0
@=GetLastError();
[SetLastError]
1=DWORD dwErrCode
ParamCount=1
@=SetLastError(DWORD dwErrCode);
[RestoreLastError]
1=DWORD dwErrCode
ParamCount=1
@=RestoreLastError(DWORD dwErrCode);
[GetOverlappedResult]
1=HANDLE hFile
2=LPOVERLAPPED lpOverlapped
3=LPDWORD lpNumberOfBytesTransferred
4=BOOL bWait
ParamCount=4
@=GetOverlappedResult(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait);
[CreateIoCompletionPort]
1=HANDLE FileHandle
2=HANDLE ExistingCompletionPort
3=ULONG_PTR CompletionKey
4=DWORD NumberOfConcurrentThreads
ParamCount=4
@=CreateIoCompletionPort(HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
[GetQueuedCompletionStatus]
1=HANDLE CompletionPort
2=LPDWORD lpNumberOfBytesTransferred
3=PULONG_PTR lpCompletionKey
4=LPOVERLAPPED *lpOverlapped
5=DWORD dwMilliseconds
ParamCount=5
@=GetQueuedCompletionStatus(HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED *lpOverlapped, DWORD dwMilliseconds);
[GetQueuedCompletionStatusEx]
1=HANDLE CompletionPort
2=LPOVERLAPPED_ENTRY lpCompletionPortEntries
3=ULONG ulCount
4=PULONG ulNumEntriesRemoved
5=DWORD dwMilliseconds
6=BOOL fAlertable
ParamCount=6
@=GetQueuedCompletionStatusEx(HANDLE CompletionPort, LPOVERLAPPED_ENTRY lpCompletionPortEntries, ULONG ulCount, PULONG ulNumEntriesRemoved, DWORD dwMilliseconds, BOOL fAlertable);
[PostQueuedCompletionStatus]
1=HANDLE CompletionPort
2=DWORD dwNumberOfBytesTransferred
3=ULONG_PTR dwCompletionKey
4=LPOVERLAPPED lpOverlapped
ParamCount=4
@=PostQueuedCompletionStatus(HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped);
[SetFileCompletionNotificationModes]
1=HANDLE FileHandle
2=UCHAR Flags
ParamCount=2
@=SetFileCompletionNotificationModes(HANDLE FileHandle, UCHAR Flags);
[SetFileIoOverlappedRange]
1=HANDLE FileHandle
2=PUCHAR OverlappedRangeStart
3=ULONG Length
ParamCount=3
@=SetFileIoOverlappedRange(HANDLE FileHandle, PUCHAR OverlappedRangeStart, ULONG Length);
[GetErrorMode]
ParamCount=0
@=GetErrorMode();
[SetErrorMode]
1=UINT uMode
ParamCount=1
@=SetErrorMode(UINT uMode);
[GetThreadErrorMode]
ParamCount=0
@=GetThreadErrorMode();
[SetThreadErrorMode]
1=DWORD dwNewMode
2=LPDWORD lpOldMode
ParamCount=2
@=SetThreadErrorMode(DWORD dwNewMode, LPDWORD lpOldMode);
[ReadProcessMemory]
1=HANDLE hProcess
2=LPCVOID lpBaseAddress
3=LPVOID lpBuffer
4=SIZE_T nSize
5=SIZE_T *lpNumberOfBytesRead
ParamCount=5
@=ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
[WriteProcessMemory]
1=HANDLE hProcess
2=LPVOID lpBaseAddress
3=LPCVOID lpBuffer
4=SIZE_T nSize
5=SIZE_T *lpNumberOfBytesWritten
ParamCount=5
@=WriteProcessMemory(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesWritten);
[GetThreadContext]
1=HANDLE hThread
2=LPCONTEXT lpContext
ParamCount=2
@=GetThreadContext(HANDLE hThread, LPCONTEXT lpContext);
[SetThreadContext]
1=HANDLE hThread
2=CONTEXT *lpContext
ParamCount=2
@=SetThreadContext(HANDLE hThread, CONTEXT *lpContext);
[Wow64GetThreadContext]
1=HANDLE hThread
2=PWOW64_CONTEXT lpContext
ParamCount=2
@=Wow64GetThreadContext(HANDLE hThread, PWOW64_CONTEXT lpContext);
[Wow64GetThreadSelectorEntry]
1=HANDLE hThread
2=DWORD dwSelector
3=PWOW64_LDT_ENTRY lpSelectorEntry
ParamCount=3
@=Wow64GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, PWOW64_LDT_ENTRY lpSelectorEntry);
[Wow64SetThreadContext]
1=HANDLE hThread
2=WOW64_CONTEXT *lpContext
ParamCount=2
@=Wow64SetThreadContext(HANDLE hThread, WOW64_CONTEXT *lpContext);
[SuspendThread]
1=HANDLE hThread
ParamCount=1
@=SuspendThread(HANDLE hThread);
[Wow64SuspendThread]
1=HANDLE hThread
ParamCount=1
@=Wow64SuspendThread(HANDLE hThread);
[ResumeThread]
1=HANDLE hThread
ParamCount=1
@=ResumeThread(HANDLE hThread);
[QueueUserAPC]
1=PAPCFUNC pfnAPC
2=HANDLE hThread
3=ULONG_PTR dwData
ParamCount=3
@=QueueUserAPC(PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
[IsDebuggerPresent]
ParamCount=0
@=IsDebuggerPresent();
[CheckRemoteDebuggerPresent]
1=HANDLE hProcess
2=PBOOL pbDebuggerPresent
ParamCount=2
@=CheckRemoteDebuggerPresent(HANDLE hProcess, PBOOL pbDebuggerPresent);
[DebugBreak]
ParamCount=0
@=DebugBreak();
[WaitForDebugEvent]
1=LPDEBUG_EVENT lpDebugEvent
2=DWORD dwMilliseconds
ParamCount=2
@=WaitForDebugEvent(LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds);
[ContinueDebugEvent]
1=DWORD dwProcessId
2=DWORD dwThreadId
3=DWORD dwContinueStatus
ParamCount=3
@=ContinueDebugEvent(DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus);
[DebugActiveProcess]
1=DWORD dwProcessId
ParamCount=1
@=DebugActiveProcess(DWORD dwProcessId);
[DebugActiveProcessStop]
1=DWORD dwProcessId
ParamCount=1
@=DebugActiveProcessStop(DWORD dwProcessId);
[DebugSetProcessKillOnExit]
1=BOOL KillOnExit
ParamCount=1
@=DebugSetProcessKillOnExit(BOOL KillOnExit);
[DebugBreakProcess]
1=HANDLE Process
ParamCount=1
@=DebugBreakProcess(HANDLE Process);
[InitializeCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
@=InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
[EnterCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
@=EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
[LeaveCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
@=LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
[InitializeCriticalSectionAndSpinCount]
1=LPCRITICAL_SECTION lpCriticalSection
2=DWORD dwSpinCount
ParamCount=2
@=InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
[InitializeCriticalSectionEx]
1=LPCRITICAL_SECTION lpCriticalSection
2=DWORD dwSpinCount
3=DWORD Flags
ParamCount=3
@=InitializeCriticalSectionEx(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags);
[SetCriticalSectionSpinCount]
1=LPCRITICAL_SECTION lpCriticalSection
2=DWORD dwSpinCount
ParamCount=2
@=SetCriticalSectionSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
[TryEnterCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
@=TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
[DeleteCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
@=DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
[SetEvent]
1=HANDLE hEvent
ParamCount=1
@=SetEvent(HANDLE hEvent);
[ResetEvent]
1=HANDLE hEvent
ParamCount=1
@=ResetEvent(HANDLE hEvent);
[PulseEvent]
1=HANDLE hEvent
ParamCount=1
@=PulseEvent(HANDLE hEvent);
[ReleaseSemaphore]
1=HANDLE hSemaphore
2=LONG lReleaseCount
3=LPLONG lpPreviousCount
ParamCount=3
@=ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount);
[ReleaseMutex]
1=HANDLE hMutex
ParamCount=1
@=ReleaseMutex(HANDLE hMutex);
[WaitForSingleObject]
1=HANDLE hHandle
2=DWORD dwMilliseconds
ParamCount=2
@=WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds);
[WaitForMultipleObjects]
1=DWORD nCount
2=HANDLE *lpHandles
3=BOOL bWaitAll
4=DWORD dwMilliseconds
ParamCount=4
@=WaitForMultipleObjects(DWORD nCount, HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds);
[Sleep]
1=DWORD dwMilliseconds
ParamCount=1
@=Sleep(DWORD dwMilliseconds);
[LoadResource]
1=HMODULE hModule
2=HRSRC hResInfo
ParamCount=2
@=LoadResource(HMODULE hModule, HRSRC hResInfo);
[SizeofResource]
1=HMODULE hModule
2=HRSRC hResInfo
ParamCount=2
@=SizeofResource(HMODULE hModule, HRSRC hResInfo);
[GlobalDeleteAtom]
1=ATOM nAtom
ParamCount=1
@=GlobalDeleteAtom(ATOM nAtom);
[InitAtomTable]
1=DWORD nSize
ParamCount=1
@=InitAtomTable(DWORD nSize);
[DeleteAtom]
1=ATOM nAtom
ParamCount=1
@=DeleteAtom(ATOM nAtom);
[SetHandleCount]
1=UINT uNumber
ParamCount=1
@=SetHandleCount(UINT uNumber);
[GetLogicalDrives]
ParamCount=0
@=GetLogicalDrives();
[LockFile]
1=HANDLE hFile
2=DWORD dwFileOffsetLow
3=DWORD dwFileOffsetHigh
4=DWORD nNumberOfBytesToLockLow
5=DWORD nNumberOfBytesToLockHigh
ParamCount=5
@=LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh);
[UnlockFile]
1=HANDLE hFile
2=DWORD dwFileOffsetLow
3=DWORD dwFileOffsetHigh
4=DWORD nNumberOfBytesToUnlockLow
5=DWORD nNumberOfBytesToUnlockHigh
ParamCount=5
@=UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh);
[LockFileEx]
1=HANDLE hFile
2=DWORD dwFlags
3=DWORD dwReserved
4=DWORD nNumberOfBytesToLockLow
5=DWORD nNumberOfBytesToLockHigh
6=LPOVERLAPPED lpOverlapped
ParamCount=6
@=LockFileEx(HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped);
[UnlockFileEx]
1=HANDLE hFile
2=DWORD dwReserved
3=DWORD nNumberOfBytesToUnlockLow
4=DWORD nNumberOfBytesToUnlockHigh
5=LPOVERLAPPED lpOverlapped
ParamCount=5
@=UnlockFileEx(HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped);
[GetFileInformationByHandle]
1=HANDLE hFile
2=LPBY_HANDLE_FILE_INFORMATION lpFileInformation
ParamCount=2
@=GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
[GetFileType]
1=HANDLE hFile
ParamCount=1
@=GetFileType(HANDLE hFile);
[GetFileSize]
1=HANDLE hFile
2=LPDWORD lpFileSizeHigh
ParamCount=2
@=GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh);
[GetFileSizeEx]
1=HANDLE hFile
2=PLARGE_INTEGER lpFileSize
ParamCount=2
@=GetFileSizeEx(HANDLE hFile, PLARGE_INTEGER lpFileSize);
[GetStdHandle]
1=DWORD nStdHandle
ParamCount=1
@=GetStdHandle(DWORD nStdHandle);
[SetStdHandle]
1=DWORD nStdHandle
2=HANDLE hHandle
ParamCount=2
@=SetStdHandle(DWORD nStdHandle, HANDLE hHandle);
[SetStdHandleEx]
1=DWORD nStdHandle
2=HANDLE hHandle
3=PHANDLE phPrevValue
ParamCount=3
@=SetStdHandleEx(DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue);
[WriteFile]
1=HANDLE hFile
2=LPCVOID lpBuffer
3=DWORD nNumberOfBytesToWrite
4=LPDWORD lpNumberOfBytesWritten
5=LPOVERLAPPED lpOverlapped
ParamCount=5
@=WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
[ReadFile]
1=HANDLE hFile
2=LPVOID lpBuffer
3=DWORD nNumberOfBytesToRead
4=LPDWORD lpNumberOfBytesRead
5=LPOVERLAPPED lpOverlapped
ParamCount=5
@=ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
[FlushFileBuffers]
1=HANDLE hFile
ParamCount=1
@=FlushFileBuffers(HANDLE hFile);
[DeviceIoControl]
1=HANDLE hDevice
2=DWORD dwIoControlCode
3=LPVOID lpInBuffer
4=DWORD nInBufferSize
5=LPVOID lpOutBuffer
6=DWORD nOutBufferSize
7=LPDWORD lpBytesReturned
8=LPOVERLAPPED lpOverlapped
ParamCount=8
@=DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
[RequestDeviceWakeup]
1=HANDLE hDevice
ParamCount=1
@=RequestDeviceWakeup(HANDLE hDevice);
[CancelDeviceWakeupRequest]
1=HANDLE hDevice
ParamCount=1
@=CancelDeviceWakeupRequest(HANDLE hDevice);
[GetDevicePowerState]
1=HANDLE hDevice
2=BOOL *pfOn
ParamCount=2
@=GetDevicePowerState(HANDLE hDevice, BOOL *pfOn);
[SetMessageWaitingIndicator]
1=HANDLE hMsgIndicator
2=ULONG ulMsgCount
ParamCount=2
@=SetMessageWaitingIndicator(HANDLE hMsgIndicator, ULONG ulMsgCount);
[SetEndOfFile]
1=HANDLE hFile
ParamCount=1
@=SetEndOfFile(HANDLE hFile);
[SetFilePointer]
1=HANDLE hFile
2=LONG lDistanceToMove
3=PLONG lpDistanceToMoveHigh
4=DWORD dwMoveMethod
ParamCount=4
@=SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
[SetFilePointerEx]
1=HANDLE hFile
2=LARGE_INTEGER liDistanceToMove
3=PLARGE_INTEGER lpNewFilePointer
4=DWORD dwMoveMethod
ParamCount=4
@=SetFilePointerEx(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);
[FindClose]
1=HANDLE hFindFile
ParamCount=1
@=FindClose(HANDLE hFindFile);
[GetFileTime]
1=HANDLE hFile
2=LPFILETIME lpCreationTime
3=LPFILETIME lpLastAccessTime
4=LPFILETIME lpLastWriteTime
ParamCount=4
@=GetFileTime(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
[SetFileTime]
1=HANDLE hFile
2=FILETIME *lpCreationTime
3=FILETIME *lpLastAccessTime
4=FILETIME *lpLastWriteTime
ParamCount=4
@=SetFileTime(HANDLE hFile, FILETIME *lpCreationTime, FILETIME *lpLastAccessTime, FILETIME *lpLastWriteTime);
[SetFileValidData]
1=HANDLE hFile
2=LONGLONG ValidDataLength
ParamCount=2
@=SetFileValidData(HANDLE hFile, LONGLONG ValidDataLength);
[SetFileShortNameA]
1=HANDLE hFile
2=LPCSTR lpShortName
ParamCount=2
@=SetFileShortNameA(HANDLE hFile, LPCSTR lpShortName);
[SetFileShortNameW]
1=HANDLE hFile
2=LPCWSTR lpShortName
ParamCount=2
@=SetFileShortNameW(HANDLE hFile, LPCWSTR lpShortName);
[CloseHandle]
1=HANDLE hObject
ParamCount=1
@=CloseHandle(HANDLE hObject);
[DuplicateHandle]
1=HANDLE hSourceProcessHandle
2=HANDLE hSourceHandle
3=HANDLE hTargetProcessHandle
4=LPHANDLE lpTargetHandle
5=DWORD dwDesiredAccess
6=BOOL bInheritHandle
7=DWORD dwOptions
ParamCount=7
@=DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions);
[GetHandleInformation]
1=HANDLE hObject
2=LPDWORD lpdwFlags
ParamCount=2
@=GetHandleInformation(HANDLE hObject, LPDWORD lpdwFlags);
[SetHandleInformation]
1=HANDLE hObject
2=DWORD dwMask
3=DWORD dwFlags
ParamCount=3
@=SetHandleInformation(HANDLE hObject, DWORD dwMask, DWORD dwFlags);
[LoadModule]
1=LPCSTR lpModuleName
2=LPVOID lpParameterBlock
ParamCount=2
@=LoadModule(LPCSTR lpModuleName, LPVOID lpParameterBlock);
[WinExec]
1=LPCSTR lpCmdLine
2=UINT uCmdShow
ParamCount=2
@=WinExec(LPCSTR lpCmdLine, UINT uCmdShow);
[ClearCommBreak]
1=HANDLE hFile
ParamCount=1
@=ClearCommBreak(HANDLE hFile);
[ClearCommError]
1=HANDLE hFile
2=LPDWORD lpErrors
3=LPCOMSTAT lpStat
ParamCount=3
@=ClearCommError(HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat);
[SetupComm]
1=HANDLE hFile
2=DWORD dwInQueue
3=DWORD dwOutQueue
ParamCount=3
@=SetupComm(HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue);
[EscapeCommFunction]
1=HANDLE hFile
2=DWORD dwFunc
ParamCount=2
@=EscapeCommFunction(HANDLE hFile, DWORD dwFunc);
[GetCommConfig]
1=HANDLE hCommDev
2=LPCOMMCONFIG lpCC
3=LPDWORD lpdwSize
ParamCount=3
@=GetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
[GetCommMask]
1=HANDLE hFile
2=LPDWORD lpEvtMask
ParamCount=2
@=GetCommMask(HANDLE hFile, LPDWORD lpEvtMask);
[GetCommProperties]
1=HANDLE hFile
2=LPCOMMPROP lpCommProp
ParamCount=2
@=GetCommProperties(HANDLE hFile, LPCOMMPROP lpCommProp);
[GetCommModemStatus]
1=HANDLE hFile
2=LPDWORD lpModemStat
ParamCount=2
@=GetCommModemStatus(HANDLE hFile, LPDWORD lpModemStat);
[GetCommState]
1=HANDLE hFile
2=LPDCB lpDCB
ParamCount=2
@=GetCommState(HANDLE hFile, LPDCB lpDCB);
[GetCommTimeouts]
1=HANDLE hFile
2=LPCOMMTIMEOUTS lpCommTimeouts
ParamCount=2
@=GetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
[PurgeComm]
1=HANDLE hFile
2=DWORD dwFlags
ParamCount=2
@=PurgeComm(HANDLE hFile, DWORD dwFlags);
[SetCommBreak]
1=HANDLE hFile
ParamCount=1
@=SetCommBreak(HANDLE hFile);
[SetCommConfig]
1=HANDLE hCommDev
2=LPCOMMCONFIG lpCC
3=DWORD dwSize
ParamCount=3
@=SetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize);
[SetCommMask]
1=HANDLE hFile
2=DWORD dwEvtMask
ParamCount=2
@=SetCommMask(HANDLE hFile, DWORD dwEvtMask);
[SetCommState]
1=HANDLE hFile
2=LPDCB lpDCB
ParamCount=2
@=SetCommState(HANDLE hFile, LPDCB lpDCB);
[SetCommTimeouts]
1=HANDLE hFile
2=LPCOMMTIMEOUTS lpCommTimeouts
ParamCount=2
@=SetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
[TransmitCommChar]
1=HANDLE hFile
2=char cChar
ParamCount=2
@=TransmitCommChar(HANDLE hFile, char cChar);
[WaitCommEvent]
1=HANDLE hFile
2=LPDWORD lpEvtMask
3=LPOVERLAPPED lpOverlapped
ParamCount=3
@=WaitCommEvent(HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped);
[SetTapePosition]
1=HANDLE hDevice
2=DWORD dwPositionMethod
3=DWORD dwPartition
4=DWORD dwOffsetLow
5=DWORD dwOffsetHigh
6=BOOL bImmediate
ParamCount=6
@=SetTapePosition(HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, BOOL bImmediate);
[GetTapePosition]
1=HANDLE hDevice
2=DWORD dwPositionType
3=LPDWORD lpdwPartition
4=LPDWORD lpdwOffsetLow
5=LPDWORD lpdwOffsetHigh
ParamCount=5
@=GetTapePosition(HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh);
[PrepareTape]
1=HANDLE hDevice
2=DWORD dwOperation
3=BOOL bImmediate
ParamCount=3
@=PrepareTape(HANDLE hDevice, DWORD dwOperation, BOOL bImmediate);
[EraseTape]
1=HANDLE hDevice
2=DWORD dwEraseType
3=BOOL bImmediate
ParamCount=3
@=EraseTape(HANDLE hDevice, DWORD dwEraseType, BOOL bImmediate);
[CreateTapePartition]
1=HANDLE hDevice
2=DWORD dwPartitionMethod
3=DWORD dwCount
4=DWORD dwSize
ParamCount=4
@=CreateTapePartition(HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize);
[WriteTapemark]
1=HANDLE hDevice
2=DWORD dwTapemarkType
3=DWORD dwTapemarkCount
4=BOOL bImmediate
ParamCount=4
@=WriteTapemark(HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, BOOL bImmediate);
[GetTapeStatus]
1=HANDLE hDevice
ParamCount=1
@=GetTapeStatus(HANDLE hDevice);
[GetTapeParameters]
1=HANDLE hDevice
2=DWORD dwOperation
3=LPDWORD lpdwSize
4=LPVOID lpTapeInformation
ParamCount=4
@=GetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation);
[SetTapeParameters]
1=HANDLE hDevice
2=DWORD dwOperation
3=LPVOID lpTapeInformation
ParamCount=3
@=SetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation);
[Beep]
1=DWORD dwFreq
2=DWORD dwDuration
ParamCount=2
@=Beep(DWORD dwFreq, DWORD dwDuration);
[MulDiv]
1=int nNumber
2=int nNumerator
3=int nDenominator
ParamCount=3
@=MulDiv(int nNumber, int nNumerator, int nDenominator);
[GetSystemTime]
1=LPSYSTEMTIME lpSystemTime
ParamCount=1
@=GetSystemTime(LPSYSTEMTIME lpSystemTime);
[GetSystemTimeAsFileTime]
1=LPFILETIME lpSystemTimeAsFileTime
ParamCount=1
@=GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
[SetSystemTime]
1=SYSTEMTIME *lpSystemTime
ParamCount=1
@=SetSystemTime(SYSTEMTIME *lpSystemTime);
[GetLocalTime]
1=LPSYSTEMTIME lpSystemTime
ParamCount=1
@=GetLocalTime(LPSYSTEMTIME lpSystemTime);
[SetLocalTime]
1=SYSTEMTIME *lpSystemTime
ParamCount=1
@=SetLocalTime(SYSTEMTIME *lpSystemTime);
[GetSystemInfo]
1=LPSYSTEM_INFO lpSystemInfo
ParamCount=1
@=GetSystemInfo(LPSYSTEM_INFO lpSystemInfo);
[GetSystemDEPPolicy]
ParamCount=0
@=GetSystemDEPPolicy();
[SetSystemFileCacheSize]
1=SIZE_T MinimumFileCacheSize
2=SIZE_T MaximumFileCacheSize
3=DWORD Flags
ParamCount=3
@=SetSystemFileCacheSize(SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags);
[GetSystemFileCacheSize]
1=PSIZE_T lpMinimumFileCacheSize
2=PSIZE_T lpMaximumFileCacheSize
3=PDWORD lpFlags
ParamCount=3
@=GetSystemFileCacheSize(PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags);
[GetSystemRegistryQuota]
1=PDWORD pdwQuotaAllowed
2=PDWORD pdwQuotaUsed
ParamCount=2
@=GetSystemRegistryQuota(PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed);
[GetSystemTimes]
1=LPFILETIME lpIdleTime
2=LPFILETIME lpKernelTime
3=LPFILETIME lpUserTime
ParamCount=3
@=GetSystemTimes(LPFILETIME lpIdleTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
[GetNativeSystemInfo]
1=LPSYSTEM_INFO lpSystemInfo
ParamCount=1
@=GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo);
[IsProcessorFeaturePresent]
1=DWORD ProcessorFeature
ParamCount=1
@=IsProcessorFeaturePresent(DWORD ProcessorFeature);
[SystemTimeToTzSpecificLocalTime]
1=TIME_ZONE_INFORMATION *lpTimeZoneInformation
2=SYSTEMTIME *lpUniversalTime
3=LPSYSTEMTIME lpLocalTime
ParamCount=3
@=SystemTimeToTzSpecificLocalTime(TIME_ZONE_INFORMATION *lpTimeZoneInformation, SYSTEMTIME *lpUniversalTime, LPSYSTEMTIME lpLocalTime);
[TzSpecificLocalTimeToSystemTime]
1=TIME_ZONE_INFORMATION *lpTimeZoneInformation
2=SYSTEMTIME *lpLocalTime
3=LPSYSTEMTIME lpUniversalTime
ParamCount=3
@=TzSpecificLocalTimeToSystemTime(TIME_ZONE_INFORMATION *lpTimeZoneInformation, SYSTEMTIME *lpLocalTime, LPSYSTEMTIME lpUniversalTime);
[GetTimeZoneInformationForYear]
1=USHORT wYear
2=PDYNAMIC_TIME_ZONE_INFORMATION pdtzi
3=LPTIME_ZONE_INFORMATION ptzi
ParamCount=3
@=GetTimeZoneInformationForYear(USHORT wYear, PDYNAMIC_TIME_ZONE_INFORMATION pdtzi, LPTIME_ZONE_INFORMATION ptzi);
[GetTimeZoneInformation]
1=LPTIME_ZONE_INFORMATION lpTimeZoneInformation
ParamCount=1
@=GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
[SetTimeZoneInformation]
1=TIME_ZONE_INFORMATION *lpTimeZoneInformation
ParamCount=1
@=SetTimeZoneInformation(TIME_ZONE_INFORMATION *lpTimeZoneInformation);
[GetDynamicTimeZoneInformation]
1=PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
ParamCount=1
@=GetDynamicTimeZoneInformation(PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation);
[SetDynamicTimeZoneInformation]
1=DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation
ParamCount=1
@=SetDynamicTimeZoneInformation(DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation);
[SystemTimeToFileTime]
1=SYSTEMTIME *lpSystemTime
2=LPFILETIME lpFileTime
ParamCount=2
@=SystemTimeToFileTime(SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
[FileTimeToLocalFileTime]
1=FILETIME *lpFileTime
2=LPFILETIME lpLocalFileTime
ParamCount=2
@=FileTimeToLocalFileTime(FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
[LocalFileTimeToFileTime]
1=FILETIME *lpLocalFileTime
2=LPFILETIME lpFileTime
ParamCount=2
@=LocalFileTimeToFileTime(FILETIME *lpLocalFileTime, LPFILETIME lpFileTime);
[FileTimeToSystemTime]
1=FILETIME *lpFileTime
2=LPSYSTEMTIME lpSystemTime
ParamCount=2
@=FileTimeToSystemTime(FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime);
[CompareFileTime]
1=FILETIME *lpFileTime1
2=FILETIME *lpFileTime2
ParamCount=2
@=CompareFileTime(FILETIME *lpFileTime1, FILETIME *lpFileTime2);
[FileTimeToDosDateTime]
1=FILETIME *lpFileTime
2=LPWORD lpFatDate
3=LPWORD lpFatTime
ParamCount=3
@=FileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime);
[DosDateTimeToFileTime]
1=WORD wFatDate
2=WORD wFatTime
3=LPFILETIME lpFileTime
ParamCount=3
@=DosDateTimeToFileTime(WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime);
[GetTickCount]
ParamCount=0
@=GetTickCount();
[GetTickCount64]
ParamCount=0
@=GetTickCount64();
[SetSystemTimeAdjustment]
1=DWORD dwTimeAdjustment
2=BOOL bTimeAdjustmentDisabled
ParamCount=2
@=SetSystemTimeAdjustment(DWORD dwTimeAdjustment, BOOL bTimeAdjustmentDisabled);
[GetSystemTimeAdjustment]
1=PDWORD lpTimeAdjustment
2=PDWORD lpTimeIncrement
3=PBOOL lpTimeAdjustmentDisabled
ParamCount=3
@=GetSystemTimeAdjustment(PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled);
[FormatMessageA]
1=DWORD dwFlags
2=LPCVOID lpSource
3=DWORD dwMessageId
4=DWORD dwLanguageId
5=LPSTR lpBuffer
6=DWORD nSize
7=va_list *Arguments
ParamCount=7
@=FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
[FormatMessageW]
1=DWORD dwFlags
2=LPCVOID lpSource
3=DWORD dwMessageId
4=DWORD dwLanguageId
5=LPWSTR lpBuffer
6=DWORD nSize
7=va_list *Arguments
ParamCount=7
@=FormatMessageW(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments);
[CreatePipe]
1=PHANDLE hReadPipe
2=PHANDLE hWritePipe
3=LPSECURITY_ATTRIBUTES lpPipeAttributes
4=DWORD nSize
ParamCount=4
@=CreatePipe(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
[ConnectNamedPipe]
1=HANDLE hNamedPipe
2=LPOVERLAPPED lpOverlapped
ParamCount=2
@=ConnectNamedPipe(HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped);
[DisconnectNamedPipe]
1=HANDLE hNamedPipe
ParamCount=1
@=DisconnectNamedPipe(HANDLE hNamedPipe);
[SetNamedPipeHandleState]
1=HANDLE hNamedPipe
2=LPDWORD lpMode
3=LPDWORD lpMaxCollectionCount
4=LPDWORD lpCollectDataTimeout
ParamCount=4
@=SetNamedPipeHandleState(HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout);
[GetNamedPipeInfo]
1=HANDLE hNamedPipe
2=LPDWORD lpFlags
3=LPDWORD lpOutBufferSize
4=LPDWORD lpInBufferSize
5=LPDWORD lpMaxInstances
ParamCount=5
@=GetNamedPipeInfo(HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances);
[PeekNamedPipe]
1=HANDLE hNamedPipe
2=LPVOID lpBuffer
3=DWORD nBufferSize
4=LPDWORD lpBytesRead
5=LPDWORD lpTotalBytesAvail
6=LPDWORD lpBytesLeftThisMessage
ParamCount=6
@=PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage);
[TransactNamedPipe]
1=HANDLE hNamedPipe
2=LPVOID lpInBuffer
3=DWORD nInBufferSize
4=LPVOID lpOutBuffer
5=DWORD nOutBufferSize
6=LPDWORD lpBytesRead
7=LPOVERLAPPED lpOverlapped
ParamCount=7
@=TransactNamedPipe(HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped);
[CreateMailslotA]
1=LPCSTR lpName
2=DWORD nMaxMessageSize
3=DWORD lReadTimeout
4=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=4
@=CreateMailslotA(LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[CreateMailslotW]
1=LPCWSTR lpName
2=DWORD nMaxMessageSize
3=DWORD lReadTimeout
4=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=4
@=CreateMailslotW(LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[GetMailslotInfo]
1=HANDLE hMailslot
2=LPDWORD lpMaxMessageSize
3=LPDWORD lpNextSize
4=LPDWORD lpMessageCount
5=LPDWORD lpReadTimeout
ParamCount=5
@=GetMailslotInfo(HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout);
[SetMailslotInfo]
1=HANDLE hMailslot
2=DWORD lReadTimeout
ParamCount=2
@=SetMailslotInfo(HANDLE hMailslot, DWORD lReadTimeout);
[MapViewOfFile]
1=HANDLE hFileMappingObject
2=DWORD dwDesiredAccess
3=DWORD dwFileOffsetHigh
4=DWORD dwFileOffsetLow
5=SIZE_T dwNumberOfBytesToMap
ParamCount=5
@=MapViewOfFile(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
[FlushViewOfFile]
1=LPCVOID lpBaseAddress
2=SIZE_T dwNumberOfBytesToFlush
ParamCount=2
@=FlushViewOfFile(LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush);
[UnmapViewOfFile]
1=LPCVOID lpBaseAddress
ParamCount=1
@=UnmapViewOfFile(LPCVOID lpBaseAddress);
[EncryptFileA]
1=LPCSTR lpFileName
ParamCount=1
@=EncryptFileA(LPCSTR lpFileName);
[EncryptFileW]
1=LPCWSTR lpFileName
ParamCount=1
@=EncryptFileW(LPCWSTR lpFileName);
[DecryptFileA]
1=LPCSTR lpFileName
2=DWORD dwReserved
ParamCount=2
@=DecryptFileA(LPCSTR lpFileName, DWORD dwReserved);
[DecryptFileW]
1=LPCWSTR lpFileName
2=DWORD dwReserved
ParamCount=2
@=DecryptFileW(LPCWSTR lpFileName, DWORD dwReserved);
[FileEncryptionStatusA]
1=LPCSTR lpFileName
2=LPDWORD lpStatus
ParamCount=2
@=FileEncryptionStatusA(LPCSTR lpFileName, LPDWORD lpStatus);
[FileEncryptionStatusW]
1=LPCWSTR lpFileName
2=LPDWORD lpStatus
ParamCount=2
@=FileEncryptionStatusW(LPCWSTR lpFileName, LPDWORD lpStatus);
[OpenEncryptedFileRawA]
1=LPCSTR lpFileName
2=ULONG ulFlags
3=PVOID *pvContext
ParamCount=3
@=OpenEncryptedFileRawA(LPCSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
[OpenEncryptedFileRawW]
1=LPCWSTR lpFileName
2=ULONG ulFlags
3=PVOID *pvContext
ParamCount=3
@=OpenEncryptedFileRawW(LPCWSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
[ReadEncryptedFileRaw]
1=PFE_EXPORT_FUNC pfExportCallback
2=PVOID pvCallbackContext
3=PVOID pvContext
ParamCount=3
@=ReadEncryptedFileRaw(PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext);
[WriteEncryptedFileRaw]
1=PFE_IMPORT_FUNC pfImportCallback
2=PVOID pvCallbackContext
3=PVOID pvContext
ParamCount=3
@=WriteEncryptedFileRaw(PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext);
[CloseEncryptedFileRaw]
1=PVOID pvContext
ParamCount=1
@=CloseEncryptedFileRaw(PVOID pvContext);
[lstrcmpA]
1=LPCSTR lpString1
2=LPCSTR lpString2
ParamCount=2
@=lstrcmpA(LPCSTR lpString1, LPCSTR lpString2);
[lstrcmpW]
1=LPCWSTR lpString1
2=LPCWSTR lpString2
ParamCount=2
@=lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2);
[lstrcmpiA]
1=LPCSTR lpString1
2=LPCSTR lpString2
ParamCount=2
@=lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2);
[lstrcmpiW]
1=LPCWSTR lpString1
2=LPCWSTR lpString2
ParamCount=2
@=lstrcmpiW(LPCWSTR lpString1, LPCWSTR lpString2);
[lstrcpynA]
1=LPSTR lpString1
2=LPCSTR lpString2
3=int iMaxLength
ParamCount=3
@=lstrcpynA(LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
[lstrcpynW]
1=LPWSTR lpString1
2=LPCWSTR lpString2
3=int iMaxLength
ParamCount=3
@=lstrcpynW(LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
[lstrcpyA]
1=LPSTR lpString1
2=LPCSTR lpString2
ParamCount=2
@=lstrcpyA(LPSTR lpString1, LPCSTR lpString2);
[lstrcpyW]
1=LPWSTR lpString1
2=LPCWSTR lpString2
ParamCount=2
@=lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2);
[lstrcatA]
1=LPSTR lpString1
2=LPCSTR lpString2
ParamCount=2
@=lstrcatA(LPSTR lpString1, LPCSTR lpString2);
[lstrcatW]
1=LPWSTR lpString1
2=LPCWSTR lpString2
ParamCount=2
@=lstrcatW(LPWSTR lpString1, LPCWSTR lpString2);
[lstrlenA]
1=LPCSTR lpString
ParamCount=1
@=lstrlenA(LPCSTR lpString);
[lstrlenW]
1=LPCWSTR lpString
ParamCount=1
@=lstrlenW(LPCWSTR lpString);
[OpenFile]
1=LPCSTR lpFileName
2=LPOFSTRUCT lpReOpenBuff
3=UINT uStyle
ParamCount=3
@=OpenFile(LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle);
[_lopen]
1=LPCSTR lpPathName
2=int iReadWrite
ParamCount=2
@=_lopen(LPCSTR lpPathName, int iReadWrite);
[_lcreat]
1=LPCSTR lpPathName
2=int iAttribute
ParamCount=2
@=_lcreat(LPCSTR lpPathName, int iAttribute);
[_lread]
1=HFILE hFile
2=LPVOID lpBuffer
3=UINT uBytes
ParamCount=3
@=_lread(HFILE hFile, LPVOID lpBuffer, UINT uBytes);
[_lwrite]
1=HFILE hFile
2=LPCCH lpBuffer
3=UINT uBytes
ParamCount=3
@=_lwrite(HFILE hFile, LPCCH lpBuffer, UINT uBytes);
[_hread]
1=HFILE hFile
2=LPVOID lpBuffer
3=long lBytes
ParamCount=3
@=_hread(HFILE hFile, LPVOID lpBuffer, long lBytes);
[_hwrite]
1=HFILE hFile
2=LPCCH lpBuffer
3=long lBytes
ParamCount=3
@=_hwrite(HFILE hFile, LPCCH lpBuffer, long lBytes);
[_lclose]
1=HFILE hFile
ParamCount=1
@=_lclose(HFILE hFile);
[_llseek]
1=HFILE hFile
2=LONG lOffset
3=int iOrigin
ParamCount=3
@=_llseek(HFILE hFile, LONG lOffset, int iOrigin);
[IsTextUnicode]
1=VOID* lpv
2=int iSize
3=LPINT lpiResult
ParamCount=3
@=IsTextUnicode(VOID* lpv, int iSize, LPINT lpiResult);
[FlsAlloc]
1=PFLS_CALLBACK_FUNCTION lpCallback
ParamCount=1
@=FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback);
[FlsGetValue]
1=DWORD dwFlsIndex
ParamCount=1
@=FlsGetValue(DWORD dwFlsIndex);
[FlsSetValue]
1=DWORD dwFlsIndex
2=PVOID lpFlsData
ParamCount=2
@=FlsSetValue(DWORD dwFlsIndex, PVOID lpFlsData);
[FlsFree]
1=DWORD dwFlsIndex
ParamCount=1
@=FlsFree(DWORD dwFlsIndex);
[TlsAlloc]
ParamCount=0
@=TlsAlloc();
[TlsGetValue]
1=DWORD dwTlsIndex
ParamCount=1
@=TlsGetValue(DWORD dwTlsIndex);
[TlsSetValue]
1=DWORD dwTlsIndex
2=LPVOID lpTlsValue
ParamCount=2
@=TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue);
[TlsFree]
1=DWORD dwTlsIndex
ParamCount=1
@=TlsFree(DWORD dwTlsIndex);
[SleepEx]
1=DWORD dwMilliseconds
2=BOOL bAlertable
ParamCount=2
@=SleepEx(DWORD dwMilliseconds, BOOL bAlertable);
[WaitForSingleObjectEx]
1=HANDLE hHandle
2=DWORD dwMilliseconds
3=BOOL bAlertable
ParamCount=3
@=WaitForSingleObjectEx(HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable);
[WaitForMultipleObjectsEx]
1=DWORD nCount
2=HANDLE *lpHandles
3=BOOL bWaitAll
4=DWORD dwMilliseconds
5=BOOL bAlertable
ParamCount=5
@=WaitForMultipleObjectsEx(DWORD nCount, HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable);
[SignalObjectAndWait]
1=HANDLE hObjectToSignal
2=HANDLE hObjectToWaitOn
3=DWORD dwMilliseconds
4=BOOL bAlertable
ParamCount=4
@=SignalObjectAndWait(HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, BOOL bAlertable);
[ReadFileEx]
1=HANDLE hFile
2=HANDLE LPVOIDlpBuffer
3=DWORD nNumberOfBytesToRead
4=LPOVERLAPPED lpOverlapped
5=LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
ParamCount=5
@=ReadFileEx(HANDLE hFile, HANDLE LPVOIDlpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
[WriteFileEx]
1=HANDLE hFile
2=LPCVOID lpBuffer
3=DWORD nNumberOfBytesToWrite
4=LPOVERLAPPED lpOverlapped
5=LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
ParamCount=5
@=WriteFileEx(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
[BackupRead]
1=HANDLE hFile
2=LPBYTE lpBuffer
3=DWORD nNumberOfBytesToRead
4=LPDWORD lpNumberOfBytesRead
5=BOOL bAbort
6=BOOL bProcessSecurity
7=LPVOID *lpContext
ParamCount=7
@=BackupRead(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext);
[BackupSeek]
1=HANDLE hFile
2=DWORD dwLowBytesToSeek
3=DWORD dwHighBytesToSeek
4=LPDWORD lpdwLowByteSeeked
5=LPDWORD lpdwHighByteSeeked
6=LPVOID *lpContext
ParamCount=6
@=BackupSeek(HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID *lpContext);
[BackupWrite]
1=HANDLE hFile
2=LPBYTE lpBuffer
3=DWORD nNumberOfBytesToWrite
4=LPDWORD lpNumberOfBytesWritten
5=BOOL bAbort
6=BOOL bProcessSecurity
7=LPVOID *lpContext
ParamCount=7
@=BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext);
[ReadFileScatter]
1=HANDLE hFile
2=FILE_SEGMENT_ELEMENT aSegmentArray[]
3=DWORD nNumberOfBytesToRead
4=LPDWORD lpReserved
5=LPOVERLAPPED lpOverlapped
ParamCount=5
@=ReadFileScatter(HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
[WriteFileGather]
1=HANDLE hFile
2=FILE_SEGMENT_ELEMENT aSegmentArray[]
3=DWORD nNumberOfBytesToWrite
4=LPDWORD lpReserved
5=LPOVERLAPPED lpOverlapped
ParamCount=5
@=WriteFileGather(HANDLE hFile, FILE_SEGMENT_ELEMENT aSegmentArray[], DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
[CreateMutexA]
1=LPSECURITY_ATTRIBUTES lpMutexAttributes
2=BOOL bInitialOwner
3=LPCSTR lpName
ParamCount=3
@=CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName);
[CreateMutexW]
1=LPSECURITY_ATTRIBUTES lpMutexAttributes
2=BOOL bInitialOwner
3=LPCWSTR lpName
ParamCount=3
@=CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName);
[OpenMutexA]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCSTR lpName
ParamCount=3
@=OpenMutexA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
[OpenMutexW]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCWSTR lpName
ParamCount=3
@=OpenMutexW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
[CreateEventA]
1=LPSECURITY_ATTRIBUTES lpEventAttributes
2=BOOL bManualReset
3=BOOL bInitialState
4=LPCSTR lpName
ParamCount=4
@=CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName);
[CreateEventW]
1=LPSECURITY_ATTRIBUTES lpEventAttributes
2=BOOL bManualReset
3=BOOL bInitialState
4=LPCWSTR lpName
ParamCount=4
@=CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName);
[OpenEventA]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCSTR lpName
ParamCount=3
@=OpenEventA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
[OpenEventW]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCWSTR lpName
ParamCount=3
@=OpenEventW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
[CreateSemaphoreA]
1=LPSECURITY_ATTRIBUTES lpSemaphoreAttributes
2=LONG lInitialCount
3=LONG lMaximumCount
4=LPCSTR lpName
ParamCount=4
@=CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName);
[CreateSemaphoreW]
1=LPSECURITY_ATTRIBUTES lpSemaphoreAttributes
2=LONG lInitialCount
3=LONG lMaximumCount
4=LPCWSTR lpName
ParamCount=4
@=CreateSemaphoreW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName);
[OpenSemaphoreA]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCSTR lpName
ParamCount=3
@=OpenSemaphoreA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
[OpenSemaphoreW]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCWSTR lpName
ParamCount=3
@=OpenSemaphoreW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
[*PTIMERAPCROUTINE)]
1=LPVOID lpArgToCompletionRoutine
2=DWORD dwTimerLowValue
3=DWORD dwTimerHighValue
ParamCount=3
@=*PTIMERAPCROUTINE)(LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue);
[CreateWaitableTimerA]
1=LPSECURITY_ATTRIBUTES lpTimerAttributes
2=BOOL bManualReset
3=LPCSTR lpTimerName
ParamCount=3
@=CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCSTR lpTimerName);
[CreateWaitableTimerW]
1=LPSECURITY_ATTRIBUTES lpTimerAttributes
2=BOOL bManualReset
3=LPCWSTR lpTimerName
ParamCount=3
@=CreateWaitableTimerW(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCWSTR lpTimerName);
[OpenWaitableTimerA]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCSTR lpTimerName
ParamCount=3
@=OpenWaitableTimerA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpTimerName);
[OpenWaitableTimerW]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCWSTR lpTimerName
ParamCount=3
@=OpenWaitableTimerW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpTimerName);
[SetWaitableTimerEx]
1=HANDLE hTimer
2=LARGE_INTEGER *lpDueTime
3=LONG lPeriod
4=PTIMERAPCROUTINE pfnCompletionRoutine
5=LPVOID lpArgToCompletionRoutine
6=PREASON_CONTEXT WakeContext
7=ULONG TolerableDelay
ParamCount=7
@=SetWaitableTimerEx(HANDLE hTimer, LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, PREASON_CONTEXT WakeContext, ULONG TolerableDelay);
[SetWaitableTimer]
1=HANDLE hTimer
2=LARGE_INTEGER *lpDueTime
3=LONG lPeriod
4=PTIMERAPCROUTINE pfnCompletionRoutine
5=LPVOID lpArgToCompletionRoutine
6=BOOL fResume
ParamCount=6
@=SetWaitableTimer(HANDLE hTimer, LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, BOOL fResume);
[CancelWaitableTimer]
1=HANDLE hTimer
ParamCount=1
@=CancelWaitableTimer(HANDLE hTimer);
[CreateMutexExA]
1=LPSECURITY_ATTRIBUTES lpMutexAttributes
2=LPCSTR lpName
3=DWORD dwFlags
4=DWORD dwDesiredAccess
ParamCount=4
@=CreateMutexExA(LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
[CreateMutexExW]
1=LPSECURITY_ATTRIBUTES lpMutexAttributes
2=LPCWSTR lpName
3=DWORD dwFlags
4=DWORD dwDesiredAccess
ParamCount=4
@=CreateMutexExW(LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
[CreateEventExA]
1=LPSECURITY_ATTRIBUTES lpEventAttributes
2=LPCSTR lpName
3=DWORD dwFlags
4=DWORD dwDesiredAccess
ParamCount=4
@=CreateEventExA(LPSECURITY_ATTRIBUTES lpEventAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
[CreateEventExW]
1=LPSECURITY_ATTRIBUTES lpEventAttributes
2=LPCWSTR lpName
3=DWORD dwFlags
4=DWORD dwDesiredAccess
ParamCount=4
@=CreateEventExW(LPSECURITY_ATTRIBUTES lpEventAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
[CreateSemaphoreExA]
1=LPSECURITY_ATTRIBUTES lpSemaphoreAttributes
2=LONG lInitialCount
3=LONG lMaximumCount
4=LPCSTR lpName
5=DWORD dwFlags
6=DWORD dwDesiredAccess
ParamCount=6
@=CreateSemaphoreExA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
[CreateSemaphoreExW]
1=LPSECURITY_ATTRIBUTES lpSemaphoreAttributes
2=LONG lInitialCount
3=LONG lMaximumCount
4=LPCWSTR lpName
5=DWORD dwFlags
6=DWORD dwDesiredAccess
ParamCount=6
@=CreateSemaphoreExW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess);
[CreateWaitableTimerExA]
1=LPSECURITY_ATTRIBUTES lpTimerAttributes
2=LPCSTR lpTimerName
3=DWORD dwFlags
4=DWORD dwDesiredAccess
ParamCount=4
@=CreateWaitableTimerExA(LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess);
[CreateWaitableTimerExW]
1=LPSECURITY_ATTRIBUTES lpTimerAttributes
2=LPCWSTR lpTimerName
3=DWORD dwFlags
4=DWORD dwDesiredAccess
ParamCount=4
@=CreateWaitableTimerExW(LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCWSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess);
[CreateFileMappingA]
1=HANDLE hFile
2=LPSECURITY_ATTRIBUTES lpFileMappingAttributes
3=DWORD flProtect
4=DWORD dwMaximumSizeHigh
5=DWORD dwMaximumSizeLow
6=LPCSTR lpName
ParamCount=6
@=CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);
[CreateFileMappingW]
1=HANDLE hFile
2=LPSECURITY_ATTRIBUTES lpFileMappingAttributes
3=DWORD flProtect
4=DWORD dwMaximumSizeHigh
5=DWORD dwMaximumSizeLow
6=LPCWSTR lpName
ParamCount=6
@=CreateFileMappingW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
[CreateFileMappingNumaA]
1=HANDLE hFile
2=LPSECURITY_ATTRIBUTES lpFileMappingAttributes
3=DWORD flProtect
4=DWORD dwMaximumSizeHigh
5=DWORD dwMaximumSizeLow
6=LPCSTR lpName
7=DWORD nndPreferred
ParamCount=7
@=CreateFileMappingNumaA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName, DWORD nndPreferred);
[CreateFileMappingNumaW]
1=HANDLE hFile
2=LPSECURITY_ATTRIBUTES lpFileMappingAttributes
3=DWORD flProtect
4=DWORD dwMaximumSizeHigh
5=DWORD dwMaximumSizeLow
6=LPCWSTR lpName
7=DWORD nndPreferred
ParamCount=7
@=CreateFileMappingNumaW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName, DWORD nndPreferred);
[OpenFileMappingA]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCSTR lpName
ParamCount=3
@=OpenFileMappingA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
[OpenFileMappingW]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCWSTR lpName
ParamCount=3
@=OpenFileMappingW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
[GetLogicalDriveStringsA]
1=DWORD nBufferLength
2=LPSTR lpBuffer
ParamCount=2
@=GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer);
[GetLogicalDriveStringsW]
1=DWORD nBufferLength
2=LPWSTR lpBuffer
ParamCount=2
@=GetLogicalDriveStringsW(DWORD nBufferLength, LPWSTR lpBuffer);
[CreateMemoryResourceNotification]
1=MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
ParamCount=1
@=CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
[QueryMemoryResourceNotification]
1=HANDLE ResourceNotificationHandle
2=PBOOL ResourceState
ParamCount=2
@=QueryMemoryResourceNotification(HANDLE ResourceNotificationHandle, PBOOL ResourceState);
[LoadLibraryA]
1=LPCSTR lpLibFileName
ParamCount=1
@=LoadLibraryA(LPCSTR lpLibFileName);
[LoadLibraryW]
1=LPCWSTR lpLibFileName
ParamCount=1
@=LoadLibraryW(LPCWSTR lpLibFileName);
[LoadLibraryExA]
1=LPCSTR lpLibFileName
2=HANDLE hFile
3=DWORD dwFlags
ParamCount=3
@=LoadLibraryExA(LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
[LoadLibraryExW]
1=LPCWSTR lpLibFileName
2=HANDLE hFile
3=DWORD dwFlags
ParamCount=3
@=LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
[GetModuleFileNameA]
1=HMODULE hModule
2=LPSTR lpFilename
3=DWORD nSize
ParamCount=3
@=GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize);
[GetModuleFileNameW]
1=HMODULE hModule
2=LPWSTR lpFilename
3=DWORD nSize
ParamCount=3
@=GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
[GetModuleHandleA]
1=LPCSTR lpModuleName
ParamCount=1
@=GetModuleHandleA(LPCSTR lpModuleName);
[GetModuleHandleW]
1=LPCWSTR lpModuleName
ParamCount=1
@=GetModuleHandleW(LPCWSTR lpModuleName);
[GetModuleHandleExA]
1=DWORD dwFlags
2=LPCSTR lpModuleName
3=HMODULE* phModule
ParamCount=3
@=GetModuleHandleExA(DWORD dwFlags, LPCSTR lpModuleName, HMODULE* phModule);
[GetModuleHandleExW]
1=DWORD dwFlags
2=LPCWSTR lpModuleName
3=HMODULE* phModule
ParamCount=3
@=GetModuleHandleExW(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE* phModule);
[NeedCurrentDirectoryForExePathA]
1=LPCSTR ExeName
ParamCount=1
@=NeedCurrentDirectoryForExePathA(LPCSTR ExeName);
[NeedCurrentDirectoryForExePathW]
1=LPCWSTR ExeName
ParamCount=1
@=NeedCurrentDirectoryForExePathW(LPCWSTR ExeName);
[QueryFullProcessImageNameA]
1=HANDLE hProcess
2=DWORD dwFlags
3=LPSTR lpExeName
4=PDWORD lpdwSize
ParamCount=4
@=QueryFullProcessImageNameA(HANDLE hProcess, DWORD dwFlags, LPSTR lpExeName, PDWORD lpdwSize);
[QueryFullProcessImageNameW]
1=HANDLE hProcess
2=DWORD dwFlags
3=LPWSTR lpExeName
4=PDWORD lpdwSize
ParamCount=4
@=QueryFullProcessImageNameW(HANDLE hProcess, DWORD dwFlags, LPWSTR lpExeName, PDWORD lpdwSize);
[InitializeProcThreadAttributeList]
1=LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
2=DWORD dwAttributeCount
3=DWORD dwFlags
4=PSIZE_T lpSize
ParamCount=4
@=InitializeProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwAttributeCount, DWORD dwFlags, PSIZE_T lpSize);
[DeleteProcThreadAttributeList]
1=LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
ParamCount=1
@=DeleteProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList);
[UpdateProcThreadAttribute]
1=LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
2=DWORD dwFlags
3=DWORD_PTR Attribute
4=PVOID lpValue
5=SIZE_T cbSize
6=PVOID lpPreviousValue
7=PSIZE_T lpReturnSize
ParamCount=7
@=UpdateProcThreadAttribute(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwFlags, DWORD_PTR Attribute, PVOID lpValue, SIZE_T cbSize, PVOID lpPreviousValue, PSIZE_T lpReturnSize);
[CreateProcessA]
1=LPCSTR lpApplicationName
2=LPSTR lpCommandLine
3=LPSECURITY_ATTRIBUTES lpProcessAttributes
4=LPSECURITY_ATTRIBUTES lpThreadAttributes
5=BOOL bInheritHandles
6=DWORD dwCreationFlags
7=LPVOID lpEnvironment
8=LPCSTR lpCurrentDirectory
9=LPSTARTUPINFOA lpStartupInfo
10=LPPROCESS_INFORMATION lpProcessInformation
ParamCount=10
@=CreateProcessA(LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
[CreateProcessW]
1=LPCWSTR lpApplicationName
2=LPWSTR lpCommandLine
3=LPSECURITY_ATTRIBUTES lpProcessAttributes
4=LPSECURITY_ATTRIBUTES lpThreadAttributes
5=BOOL bInheritHandles
6=DWORD dwCreationFlags
7=LPVOID lpEnvironment
8=LPCWSTR lpCurrentDirectory
9=LPSTARTUPINFOW lpStartupInfo
10=LPPROCESS_INFORMATION lpProcessInformation
ParamCount=10
@=CreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
[SetProcessShutdownParameters]
1=DWORD dwLevel
2=DWORD dwFlags
ParamCount=2
@=SetProcessShutdownParameters(DWORD dwLevel, DWORD dwFlags);
[GetProcessShutdownParameters]
1=LPDWORD lpdwLevel
2=LPDWORD lpdwFlags
ParamCount=2
@=GetProcessShutdownParameters(LPDWORD lpdwLevel, LPDWORD lpdwFlags);
[GetProcessVersion]
1=DWORD ProcessId
ParamCount=1
@=GetProcessVersion(DWORD ProcessId);
[FatalAppExitA]
1=UINT uAction
2=LPCSTR lpMessageText
ParamCount=2
@=FatalAppExitA(UINT uAction, LPCSTR lpMessageText);
[FatalAppExitW]
1=UINT uAction
2=LPCWSTR lpMessageText
ParamCount=2
@=FatalAppExitW(UINT uAction, LPCWSTR lpMessageText);
[GetStartupInfoA]
1=LPSTARTUPINFOA lpStartupInfo
ParamCount=1
@=GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo);
[GetStartupInfoW]
1=LPSTARTUPINFOW lpStartupInfo
ParamCount=1
@=GetStartupInfoW(LPSTARTUPINFOW lpStartupInfo);
[GetCommandLineA]
ParamCount=0
@=GetCommandLineA();
[GetCommandLineW]
ParamCount=0
@=GetCommandLineW();
[GetEnvironmentVariableA]
1=LPCSTR lpName
2=LPSTR lpBuffer
3=DWORD nSize
ParamCount=3
@=GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize);
[GetEnvironmentVariableW]
1=LPCWSTR lpName
2=LPWSTR lpBuffer
3=DWORD nSize
ParamCount=3
@=GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize);
[SetEnvironmentVariableA]
1=LPCSTR lpName
2=LPCSTR lpValue
ParamCount=2
@=SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue);
[SetEnvironmentVariableW]
1=LPCWSTR lpName
2=LPCWSTR lpValue
ParamCount=2
@=SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue);
[ExpandEnvironmentStringsA]
1=LPCSTR lpSrc
2=LPSTR lpDst
3=DWORD nSize
ParamCount=3
@=ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
[ExpandEnvironmentStringsW]
1=LPCWSTR lpSrc
2=LPWSTR lpDst
3=DWORD nSize
ParamCount=3
@=ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
[GetFirmwareEnvironmentVariableA]
1=LPCSTR lpName
2=LPCSTR lpGuid
3=PVOID pBuffer
4=DWORD nSize
ParamCount=4
@=GetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize);
[GetFirmwareEnvironmentVariableW]
1=LPCWSTR lpName
2=LPCWSTR lpGuid
3=PVOID pBuffer
4=DWORD nSize
ParamCount=4
@=GetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize);
[SetFirmwareEnvironmentVariableA]
1=LPCSTR lpName
2=LPCSTR lpGuid
3=PVOID pValue
4=DWORD nSize
ParamCount=4
@=SetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize);
[SetFirmwareEnvironmentVariableW]
1=LPCWSTR lpName
2=LPCWSTR lpGuid
3=PVOID pValue
4=DWORD nSize
ParamCount=4
@=SetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize);
[OutputDebugStringA]
1=LPCSTR lpOutputString
ParamCount=1
@=OutputDebugStringA(LPCSTR lpOutputString);
[OutputDebugStringW]
1=LPCWSTR lpOutputString
ParamCount=1
@=OutputDebugStringW(LPCWSTR lpOutputString);
[FindResourceA]
1=HMODULE hModule
2=LPCSTR lpName
3=LPCSTR lpType
ParamCount=3
@=FindResourceA(HMODULE hModule, LPCSTR lpName, LPCSTR lpType);
[FindResourceW]
1=HMODULE hModule
2=LPCWSTR lpName
3=LPCWSTR lpType
ParamCount=3
@=FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
[FindResourceExA]
1=HMODULE hModule
2=LPCSTR lpType
3=LPCSTR lpName
4=WORD wLanguage
ParamCount=4
@=FindResourceExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage);
[FindResourceExW]
1=HMODULE hModule
2=LPCWSTR lpType
3=LPCWSTR lpName
4=WORD wLanguage
ParamCount=4
@=FindResourceExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
[EnumResourceTypesA]
1=HMODULE hModule
2=ENUMRESTYPEPROCA lpEnumFunc
3=LONG_PTR lParam
ParamCount=3
@=EnumResourceTypesA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam);
[EnumResourceTypesW]
1=HMODULE hModule
2=ENUMRESTYPEPROCW lpEnumFunc
3=LONG_PTR lParam
ParamCount=3
@=EnumResourceTypesW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam);
[EnumResourceNamesA]
1=HMODULE hModule
2=LPCSTR lpType
3=ENUMRESNAMEPROCA lpEnumFunc
4=LONG_PTR lParam
ParamCount=4
@=EnumResourceNamesA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam);
[EnumResourceNamesW]
1=HMODULE hModule
2=LPCWSTR lpType
3=ENUMRESNAMEPROCW lpEnumFunc
4=LONG_PTR lParam
ParamCount=4
@=EnumResourceNamesW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);
[EnumResourceLanguagesA]
1=HMODULE hModule
2=LPCSTR lpType
3=LPCSTR lpName
4=ENUMRESLANGPROCA lpEnumFunc
5=LONG_PTR lParam
ParamCount=5
@=EnumResourceLanguagesA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam);
[EnumResourceLanguagesW]
1=HMODULE hModule
2=LPCWSTR lpType
3=LPCWSTR lpName
4=ENUMRESLANGPROCW lpEnumFunc
5=LONG_PTR lParam
ParamCount=5
@=EnumResourceLanguagesW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam);
[EnumResourceTypesExA]
1=HMODULE hModule
2=ENUMRESTYPEPROCA lpEnumFunc
3=LONG_PTR lParam
4=DWORD dwFlags
5=LANGID LangId
ParamCount=5
@=EnumResourceTypesExA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
[EnumResourceTypesExW]
1=HMODULE hModule
2=ENUMRESTYPEPROCW lpEnumFunc
3=LONG_PTR lParam
4=DWORD dwFlags
5=LANGID LangId
ParamCount=5
@=EnumResourceTypesExW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
[EnumResourceNamesExA]
1=HMODULE hModule
2=LPCSTR lpType
3=ENUMRESNAMEPROCA lpEnumFunc
4=LONG_PTR lParam
5=DWORD dwFlags
6=LANGID LangId
ParamCount=6
@=EnumResourceNamesExA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
[EnumResourceNamesExW]
1=HMODULE hModule
2=LPCWSTR lpType
3=ENUMRESNAMEPROCW lpEnumFunc
4=LONG_PTR lParam
5=DWORD dwFlags
6=LANGID LangId
ParamCount=6
@=EnumResourceNamesExW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
[EnumResourceLanguagesExA]
1=HMODULE hModule
2=LPCSTR lpType
3=LPCSTR lpName
4=ENUMRESLANGPROCA lpEnumFunc
5=LONG_PTR lParam
6=DWORD dwFlags
7=LANGID LangId
ParamCount=7
@=EnumResourceLanguagesExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
[EnumResourceLanguagesExW]
1=HMODULE hModule
2=LPCWSTR lpType
3=LPCWSTR lpName
4=ENUMRESLANGPROCW lpEnumFunc
5=LONG_PTR lParam
6=DWORD dwFlags
7=LANGID LangId
ParamCount=7
@=EnumResourceLanguagesExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId);
[BeginUpdateResourceA]
1=LPCSTR pFileName
2=BOOL bDeleteExistingResources
ParamCount=2
@=BeginUpdateResourceA(LPCSTR pFileName, BOOL bDeleteExistingResources);
[BeginUpdateResourceW]
1=LPCWSTR pFileName
2=BOOL bDeleteExistingResources
ParamCount=2
@=BeginUpdateResourceW(LPCWSTR pFileName, BOOL bDeleteExistingResources);
[UpdateResourceA]
1=HANDLE hUpdate
2=LPCSTR lpType
3=LPCSTR lpName
4=WORD wLanguage
5=LPVOID lpData
6=DWORD cb
ParamCount=6
@=UpdateResourceA(HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
[UpdateResourceW]
1=HANDLE hUpdate
2=LPCWSTR lpType
3=LPCWSTR lpName
4=WORD wLanguage
5=LPVOID lpData
6=DWORD cb
ParamCount=6
@=UpdateResourceW(HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
[EndUpdateResourceA]
1=HANDLE hUpdate
2=BOOL fDiscard
ParamCount=2
@=EndUpdateResourceA(HANDLE hUpdate, BOOL fDiscard);
[EndUpdateResourceW]
1=HANDLE hUpdate
2=BOOL fDiscard
ParamCount=2
@=EndUpdateResourceW(HANDLE hUpdate, BOOL fDiscard);
[GlobalAddAtomA]
1=LPCSTR lpString
ParamCount=1
@=GlobalAddAtomA(LPCSTR lpString);
[GlobalAddAtomW]
1=LPCWSTR lpString
ParamCount=1
@=GlobalAddAtomW(LPCWSTR lpString);
[GlobalFindAtomA]
1=LPCSTR lpString
ParamCount=1
@=GlobalFindAtomA(LPCSTR lpString);
[GlobalFindAtomW]
1=LPCWSTR lpString
ParamCount=1
@=GlobalFindAtomW(LPCWSTR lpString);
[GlobalGetAtomNameA]
1=ATOM nAtom
2=LPSTR lpBuffer
3=int nSize
ParamCount=3
@=GlobalGetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize);
[GlobalGetAtomNameW]
1=ATOM nAtom
2=LPWSTR lpBuffer
3=int nSize
ParamCount=3
@=GlobalGetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize);
[AddAtomA]
1=LPCSTR lpString
ParamCount=1
@=AddAtomA(LPCSTR lpString);
[AddAtomW]
1=LPCWSTR lpString
ParamCount=1
@=AddAtomW(LPCWSTR lpString);
[FindAtomA]
1=LPCSTR lpString
ParamCount=1
@=FindAtomA(LPCSTR lpString);
[FindAtomW]
1=LPCWSTR lpString
ParamCount=1
@=FindAtomW(LPCWSTR lpString);
[GetAtomNameA]
1=ATOM nAtom
2=LPSTR lpBuffer
3=int nSize
ParamCount=3
@=GetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize);
[GetAtomNameW]
1=ATOM nAtom
2=LPWSTR lpBuffer
3=int nSize
ParamCount=3
@=GetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize);
[GetProfileIntA]
1=LPCSTR lpAppName
2=LPCSTR lpKeyName
3=INT nDefault
ParamCount=3
@=GetProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
[GetProfileIntW]
1=LPCWSTR lpAppName
2=LPCWSTR lpKeyName
3=INT nDefault
ParamCount=3
@=GetProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault);
[GetProfileStringA]
1=LPCSTR lpAppName
2=LPCSTR lpKeyName
3=LPCSTR lpDefault
4=LPSTR lpReturnedString
5=DWORD nSize
ParamCount=5
@=GetProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize);
[GetProfileStringW]
1=LPCWSTR lpAppName
2=LPCWSTR lpKeyName
3=LPCWSTR lpDefault
4=LPWSTR lpReturnedString
5=DWORD nSize
ParamCount=5
@=GetProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize);
[WriteProfileStringA]
1=LPCSTR lpAppName
2=LPCSTR lpKeyName
3=LPCSTR lpString
ParamCount=3
@=WriteProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString);
[WriteProfileStringW]
1=LPCWSTR lpAppName
2=LPCWSTR lpKeyName
3=LPCWSTR lpString
ParamCount=3
@=WriteProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString);
[GetProfileSectionA]
1=LPCSTR lpAppName
2=LPSTR lpReturnedString
3=DWORD nSize
ParamCount=3
@=GetProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize);
[GetProfileSectionW]
1=LPCWSTR lpAppName
2=LPWSTR lpReturnedString
3=DWORD nSize
ParamCount=3
@=GetProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize);
[WriteProfileSectionA]
1=LPCSTR lpAppName
2=LPCSTR lpString
ParamCount=2
@=WriteProfileSectionA(LPCSTR lpAppName, LPCSTR lpString);
[WriteProfileSectionW]
1=LPCWSTR lpAppName
2=LPCWSTR lpString
ParamCount=2
@=WriteProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString);
[GetPrivateProfileIntA]
1=LPCSTR lpAppName
2=LPCSTR lpKeyName
3=INT nDefault
4=LPCSTR lpFileName
ParamCount=4
@=GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
[GetPrivateProfileIntW]
1=LPCWSTR lpAppName
2=LPCWSTR lpKeyName
3=INT nDefault
4=LPCWSTR lpFileName
ParamCount=4
@=GetPrivateProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName);
[GetPrivateProfileStringA]
1=LPCSTR lpAppName
2=LPCSTR lpKeyName
3=LPCSTR lpDefault
4=LPSTR lpReturnedString
5=DWORD nSize
6=LPCSTR lpFileName
ParamCount=6
@=GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
[GetPrivateProfileStringW]
1=LPCWSTR lpAppName
2=LPCWSTR lpKeyName
3=LPCWSTR lpDefault
4=LPWSTR lpReturnedString
5=DWORD nSize
6=LPCWSTR lpFileName
ParamCount=6
@=GetPrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
[WritePrivateProfileStringA]
1=LPCSTR lpAppName
2=LPCSTR lpKeyName
3=LPCSTR lpString
4=LPCSTR lpFileName
ParamCount=4
@=WritePrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
[WritePrivateProfileStringW]
1=LPCWSTR lpAppName
2=LPCWSTR lpKeyName
3=LPCWSTR lpString
4=LPCWSTR lpFileName
ParamCount=4
@=WritePrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName);
[GetPrivateProfileSectionA]
1=LPCSTR lpAppName
2=LPSTR lpReturnedString
3=DWORD nSize
4=LPCSTR lpFileName
ParamCount=4
@=GetPrivateProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
[GetPrivateProfileSectionW]
1=LPCWSTR lpAppName
2=LPWSTR lpReturnedString
3=DWORD nSize
4=LPCWSTR lpFileName
ParamCount=4
@=GetPrivateProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
[WritePrivateProfileSectionA]
1=LPCSTR lpAppName
2=LPCSTR lpString
3=LPCSTR lpFileName
ParamCount=3
@=WritePrivateProfileSectionA(LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName);
[WritePrivateProfileSectionW]
1=LPCWSTR lpAppName
2=LPCWSTR lpString
3=LPCWSTR lpFileName
ParamCount=3
@=WritePrivateProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName);
[GetPrivateProfileSectionNamesA]
1=LPSTR lpszReturnBuffer
2=DWORD nSize
3=LPCSTR lpFileName
ParamCount=3
@=GetPrivateProfileSectionNamesA(LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName);
[GetPrivateProfileSectionNamesW]
1=LPWSTR lpszReturnBuffer
2=DWORD nSize
3=LPCWSTR lpFileName
ParamCount=3
@=GetPrivateProfileSectionNamesW(LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName);
[GetPrivateProfileStructA]
1=LPCSTR lpszSection
2=LPCSTR lpszKey
3=LPVOID lpStruct
4=UINT uSizeStruct
5=LPCSTR szFile
ParamCount=5
@=GetPrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
[GetPrivateProfileStructW]
1=LPCWSTR lpszSection
2=LPCWSTR lpszKey
3=LPVOID lpStruct
4=UINT uSizeStruct
5=LPCWSTR szFile
ParamCount=5
@=GetPrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
[WritePrivateProfileStructA]
1=LPCSTR lpszSection
2=LPCSTR lpszKey
3=LPVOID lpStruct
4=UINT uSizeStruct
5=LPCSTR szFile
ParamCount=5
@=WritePrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
[WritePrivateProfileStructW]
1=LPCWSTR lpszSection
2=LPCWSTR lpszKey
3=LPVOID lpStruct
4=UINT uSizeStruct
5=LPCWSTR szFile
ParamCount=5
@=WritePrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
[GetDriveTypeA]
1=LPCSTR lpRootPathName
ParamCount=1
@=GetDriveTypeA(LPCSTR lpRootPathName);
[GetDriveTypeW]
1=LPCWSTR lpRootPathName
ParamCount=1
@=GetDriveTypeW(LPCWSTR lpRootPathName);
[GetSystemDirectoryA]
1=LPSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize);
[GetSystemDirectoryW]
1=LPWSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetSystemDirectoryW(LPWSTR lpBuffer, UINT uSize);
[GetTempPathA]
1=DWORD nBufferLength
2=LPSTR lpBuffer
ParamCount=2
@=GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer);
[GetTempPathW]
1=DWORD nBufferLength
2=LPWSTR lpBuffer
ParamCount=2
@=GetTempPathW(DWORD nBufferLength, LPWSTR lpBuffer);
[GetTempFileNameA]
1=LPCSTR lpPathName
2=LPCSTR lpPrefixString
3=UINT uUnique
4=LPSTR lpTempFileName
ParamCount=4
@=GetTempFileNameA(LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName);
[GetTempFileNameW]
1=LPCWSTR lpPathName
2=LPCWSTR lpPrefixString
3=UINT uUnique
4=LPWSTR lpTempFileName
ParamCount=4
@=GetTempFileNameW(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
[GetWindowsDirectoryA]
1=LPSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);
[GetWindowsDirectoryW]
1=LPWSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize);
[GetSystemWindowsDirectoryA]
1=LPSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetSystemWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);
[GetSystemWindowsDirectoryW]
1=LPWSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetSystemWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize);
[GetSystemWow64DirectoryA]
1=LPSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetSystemWow64DirectoryA(LPSTR lpBuffer, UINT uSize);
[GetSystemWow64DirectoryW]
1=LPWSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetSystemWow64DirectoryW(LPWSTR lpBuffer, UINT uSize);
[Wow64EnableWow64FsRedirection]
1=BOOLEAN Wow64FsEnableRedirection
ParamCount=1
@=Wow64EnableWow64FsRedirection(BOOLEAN Wow64FsEnableRedirection);
[Wow64DisableWow64FsRedirection]
1=PVOID *OldValue
ParamCount=1
@=Wow64DisableWow64FsRedirection(PVOID *OldValue);
[Wow64RevertWow64FsRedirection]
1=PVOID OlValue
ParamCount=1
@=Wow64RevertWow64FsRedirection(PVOID OlValue);
[SetCurrentDirectoryA]
1=LPCSTR lpPathName
ParamCount=1
@=SetCurrentDirectoryA(LPCSTR lpPathName);
[SetCurrentDirectoryW]
1=LPCWSTR lpPathName
ParamCount=1
@=SetCurrentDirectoryW(LPCWSTR lpPathName);
[GetCurrentDirectoryA]
1=DWORD nBufferLength
2=LPSTR lpBuffer
ParamCount=2
@=GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
[GetCurrentDirectoryW]
1=DWORD nBufferLength
2=LPWSTR lpBuffer
ParamCount=2
@=GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer);
[SetDllDirectoryA]
1=LPCSTR lpPathName
ParamCount=1
@=SetDllDirectoryA(LPCSTR lpPathName);
[SetDllDirectoryW]
1=LPCWSTR lpPathName
ParamCount=1
@=SetDllDirectoryW(LPCWSTR lpPathName);
[GetDllDirectoryA]
1=DWORD nBufferLength
2=LPSTR lpBuffer
ParamCount=2
@=GetDllDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
[GetDllDirectoryW]
1=DWORD nBufferLength
2=LPWSTR lpBuffer
ParamCount=2
@=GetDllDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer);
[SetSearchPathMode]
1=DWORD Flags
ParamCount=1
@=SetSearchPathMode(DWORD Flags);
[GetDiskFreeSpaceA]
1=LPCSTR lpRootPathName
2=LPDWORD lpSectorsPerCluster
3=LPDWORD lpBytesPerSector
4=LPDWORD lpNumberOfFreeClusters
5=LPDWORD lpTotalNumberOfClusters
ParamCount=5
@=GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
[GetDiskFreeSpaceW]
1=LPCWSTR lpRootPathName
2=LPDWORD lpSectorsPerCluster
3=LPDWORD lpBytesPerSector
4=LPDWORD lpNumberOfFreeClusters
5=LPDWORD lpTotalNumberOfClusters
ParamCount=5
@=GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
[GetDiskFreeSpaceExA]
1=LPCSTR lpDirectoryName
2=PULARGE_INTEGER lpFreeBytesAvailableToCaller
3=PULARGE_INTEGER lpTotalNumberOfBytes
4=PULARGE_INTEGER lpTotalNumberOfFreeBytes
ParamCount=4
@=GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
[GetDiskFreeSpaceExW]
1=LPCWSTR lpDirectoryName
2=PULARGE_INTEGER lpFreeBytesAvailableToCaller
3=PULARGE_INTEGER lpTotalNumberOfBytes
4=PULARGE_INTEGER lpTotalNumberOfFreeBytes
ParamCount=4
@=GetDiskFreeSpaceExW(LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
[CreateDirectoryA]
1=LPCSTR lpPathName
2=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=2
@=CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[CreateDirectoryW]
1=LPCWSTR lpPathName
2=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=2
@=CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[CreateDirectoryExA]
1=LPCSTR lpTemplateDirectory
2=LPCSTR lpNewDirectory
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=3
@=CreateDirectoryExA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[CreateDirectoryExW]
1=LPCWSTR lpTemplateDirectory
2=LPCWSTR lpNewDirectory
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=3
@=CreateDirectoryExW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[CreateDirectoryTransactedA]
1=LPCSTR lpTemplateDirectory
2=LPCSTR lpNewDirectory
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
4=HANDLE hTransaction
ParamCount=4
@=CreateDirectoryTransactedA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction);
[CreateDirectoryTransactedW]
1=LPCWSTR lpTemplateDirectory
2=LPCWSTR lpNewDirectory
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
4=HANDLE hTransaction
ParamCount=4
@=CreateDirectoryTransactedW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction);
[RemoveDirectoryA]
1=LPCSTR lpPathName
ParamCount=1
@=RemoveDirectoryA(LPCSTR lpPathName);
[RemoveDirectoryW]
1=LPCWSTR lpPathName
ParamCount=1
@=RemoveDirectoryW(LPCWSTR lpPathName);
[RemoveDirectoryTransactedA]
1=LPCSTR lpPathName
2=HANDLE hTransaction
ParamCount=2
@=RemoveDirectoryTransactedA(LPCSTR lpPathName, HANDLE hTransaction);
[RemoveDirectoryTransactedW]
1=LPCWSTR lpPathName
2=HANDLE hTransaction
ParamCount=2
@=RemoveDirectoryTransactedW(LPCWSTR lpPathName, HANDLE hTransaction);
[GetFullPathNameA]
1=LPCSTR lpFileName
2=DWORD nBufferLength
3=LPSTR lpBuffer
4=LPSTR *lpFilePart
ParamCount=4
@=GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
[GetFullPathNameW]
1=LPCWSTR lpFileName
2=DWORD nBufferLength
3=LPWSTR lpBuffer
4=LPWSTR *lpFilePart
ParamCount=4
@=GetFullPathNameW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
[GetFullPathNameTransactedA]
1=LPCSTR lpFileName
2=DWORD nBufferLength
3=LPSTR lpBuffer
4=LPSTR *lpFilePart
5=HANDLE hTransaction
ParamCount=5
@=GetFullPathNameTransactedA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart, HANDLE hTransaction);
[GetFullPathNameTransactedW]
1=LPCWSTR lpFileName
2=DWORD nBufferLength
3=LPWSTR lpBuffer
4=LPWSTR *lpFilePart
5=HANDLE hTransaction
ParamCount=5
@=GetFullPathNameTransactedW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart, HANDLE hTransaction);
[DefineDosDeviceA]
1=DWORD dwFlags
2=LPCSTR lpDeviceName
3=LPCSTR lpTargetPath
ParamCount=3
@=DefineDosDeviceA(DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath);
[DefineDosDeviceW]
1=DWORD dwFlags
2=LPCWSTR lpDeviceName
3=LPCWSTR lpTargetPath
ParamCount=3
@=DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath);
[QueryDosDeviceA]
1=LPCSTR lpDeviceName
2=LPSTR lpTargetPath
3=DWORD ucchMax
ParamCount=3
@=QueryDosDeviceA(LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax);
[QueryDosDeviceW]
1=LPCWSTR lpDeviceName
2=LPWSTR lpTargetPath
3=DWORD ucchMax
ParamCount=3
@=QueryDosDeviceW(LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax);
[CreateFileA]
1=LPCSTR lpFileName
2=DWORD dwDesiredAccess
3=DWORD dwShareMode
4=LPSECURITY_ATTRIBUTES lpSecurityAttributes
5=DWORD dwCreationDisposition
6=DWORD dwFlagsAndAttributes
7=HANDLE hTemplateFile
ParamCount=7
@=CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
[CreateFileW]
1=LPCWSTR lpFileName
2=DWORD dwDesiredAccess
3=DWORD dwShareMode
4=LPSECURITY_ATTRIBUTES lpSecurityAttributes
5=DWORD dwCreationDisposition
6=DWORD dwFlagsAndAttributes
7=HANDLE hTemplateFile
ParamCount=7
@=CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
[CreateFileTransactedA]
1=LPCSTR lpFileName
2=DWORD dwDesiredAccess
3=DWORD dwShareMode
4=LPSECURITY_ATTRIBUTES lpSecurityAttributes
5=DWORD dwCreationDisposition
6=DWORD dwFlagsAndAttributes
7=HANDLE hTemplateFile
8=HANDLE hTransaction
9=PUSHORT pusMiniVersion
10=PVOID lpExtendedParameter
ParamCount=10
@=CreateFileTransactedA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter);
[CreateFileTransactedW]
1=LPCWSTR lpFileName
2=DWORD dwDesiredAccess
3=DWORD dwShareMode
4=LPSECURITY_ATTRIBUTES lpSecurityAttributes
5=DWORD dwCreationDisposition
6=DWORD dwFlagsAndAttributes
7=HANDLE hTemplateFile
8=HANDLE hTransaction
9=PUSHORT pusMiniVersion
10=PVOID lpExtendedParameter
ParamCount=10
@=CreateFileTransactedW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter);
[ReOpenFile]
1=HANDLE hOriginalFile
2=DWORD dwDesiredAccess
3=DWORD dwShareMode
4=DWORD dwFlagsAndAttributes
ParamCount=4
@=ReOpenFile(HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes);
[SetFileAttributesA]
1=LPCSTR lpFileName
2=DWORD dwFileAttributes
ParamCount=2
@=SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes);
[SetFileAttributesW]
1=LPCWSTR lpFileName
2=DWORD dwFileAttributes
ParamCount=2
@=SetFileAttributesW(LPCWSTR lpFileName, DWORD dwFileAttributes);
[GetFileAttributesA]
1=LPCSTR lpFileName
ParamCount=1
@=GetFileAttributesA(LPCSTR lpFileName);
[GetFileAttributesW]
1=LPCWSTR lpFileName
ParamCount=1
@=GetFileAttributesW(LPCWSTR lpFileName);
[SetFileAttributesTransactedA]
1=LPCSTR lpFileName
2=DWORD dwFileAttributes
3=HANDLE hTransaction
ParamCount=3
@=SetFileAttributesTransactedA(LPCSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction);
[SetFileAttributesTransactedW]
1=LPCWSTR lpFileName
2=DWORD dwFileAttributes
3=HANDLE hTransaction
ParamCount=3
@=SetFileAttributesTransactedW(LPCWSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction);
[GetFileAttributesTransactedA]
1=LPCSTR lpFileName
2=GET_FILEEX_INFO_LEVELS fInfoLevelId
3=LPVOID lpFileInformation
4=HANDLE hTransaction
ParamCount=4
@=GetFileAttributesTransactedA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction);
[GetFileAttributesTransactedW]
1=LPCWSTR lpFileName
2=GET_FILEEX_INFO_LEVELS fInfoLevelId
3=LPVOID lpFileInformation
4=HANDLE hTransaction
ParamCount=4
@=GetFileAttributesTransactedW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction);
[GetFileAttributesExA]
1=LPCSTR lpFileName
2=GET_FILEEX_INFO_LEVELS fInfoLevelId
3=LPVOID lpFileInformation
ParamCount=3
@=GetFileAttributesExA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
[GetFileAttributesExW]
1=LPCWSTR lpFileName
2=GET_FILEEX_INFO_LEVELS fInfoLevelId
3=LPVOID lpFileInformation
ParamCount=3
@=GetFileAttributesExW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
[GetCompressedFileSizeA]
1=LPCSTR lpFileName
2=LPDWORD lpFileSizeHigh
ParamCount=2
@=GetCompressedFileSizeA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh);
[GetCompressedFileSizeW]
1=LPCWSTR lpFileName
2=LPDWORD lpFileSizeHigh
ParamCount=2
@=GetCompressedFileSizeW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh);
[GetCompressedFileSizeTransactedA]
1=LPCSTR lpFileName
2=LPDWORD lpFileSizeHigh
3=HANDLE hTransaction
ParamCount=3
@=GetCompressedFileSizeTransactedA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction);
[GetCompressedFileSizeTransactedW]
1=LPCWSTR lpFileName
2=LPDWORD lpFileSizeHigh
3=HANDLE hTransaction
ParamCount=3
@=GetCompressedFileSizeTransactedW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction);
[DeleteFileA]
1=LPCSTR lpFileName
ParamCount=1
@=DeleteFileA(LPCSTR lpFileName);
[DeleteFileW]
1=LPCWSTR lpFileName
ParamCount=1
@=DeleteFileW(LPCWSTR lpFileName);
[DeleteFileTransactedA]
1=LPCSTR lpFileName
2=HANDLE hTransaction
ParamCount=2
@=DeleteFileTransactedA(LPCSTR lpFileName, HANDLE hTransaction);
[DeleteFileTransactedW]
1=LPCWSTR lpFileName
2=HANDLE hTransaction
ParamCount=2
@=DeleteFileTransactedW(LPCWSTR lpFileName, HANDLE hTransaction);
[CheckNameLegalDOS8Dot3A]
1=LPCSTR lpName
2=LPSTR lpOemName
3=DWORD OemNameSize
4=PBOOL pbNameContainsSpacesOPTIONAL
5=PBOOL pbNameLegal
ParamCount=5
@=CheckNameLegalDOS8Dot3A(LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpacesOPTIONAL, PBOOL pbNameLegal);
[CheckNameLegalDOS8Dot3W]
1=LPCWSTR lpName
2=LPSTR lpOemName
3=DWORD OemNameSize
4=PBOOL pbNameContainsSpacesOPTIONAL
5=PBOOL pbNameLegal
ParamCount=5
@=CheckNameLegalDOS8Dot3W(LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpacesOPTIONAL, PBOOL pbNameLegal);
[FindFirstFileExA]
1=LPCSTR lpFileName
2=FINDEX_INFO_LEVELS fInfoLevelId
3=LPVOID lpFindFileData
4=FINDEX_SEARCH_OPS fSearchOp
5=LPVOID lpSearchFilter
6=DWORD dwAdditionalFlags
ParamCount=6
@=FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
[FindFirstFileExW]
1=LPCWSTR lpFileName
2=FINDEX_INFO_LEVELS fInfoLevelId
3=LPVOID lpFindFileData
4=FINDEX_SEARCH_OPS fSearchOp
5=LPVOID lpSearchFilter
6=DWORD dwAdditionalFlags
ParamCount=6
@=FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
[FindFirstFileTransactedA]
1=LPCSTR lpFileName
2=FINDEX_INFO_LEVELS fInfoLevelId
3=LPVOID lpFindFileData
4=FINDEX_SEARCH_OPS fSearchOp
5=LPVOID lpSearchFilter
6=DWORD dwAdditionalFlags
7=HANDLE hTransaction
ParamCount=7
@=FindFirstFileTransactedA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction);
[FindFirstFileTransactedW]
1=LPCWSTR lpFileName
2=FINDEX_INFO_LEVELS fInfoLevelId
3=LPVOID lpFindFileData
4=FINDEX_SEARCH_OPS fSearchOp
5=LPVOID lpSearchFilter
6=DWORD dwAdditionalFlags
7=HANDLE hTransaction
ParamCount=7
@=FindFirstFileTransactedW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction);
[FindFirstFileA]
1=LPCSTR lpFileName
2=LPWIN32_FIND_DATAA lpFindFileData
ParamCount=2
@=FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);
[FindFirstFileW]
1=LPCWSTR lpFileName
2=LPWIN32_FIND_DATAW lpFindFileData
ParamCount=2
@=FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
[FindNextFileA]
1=HANDLE hFindFile
2=LPWIN32_FIND_DATAA lpFindFileData
ParamCount=2
@=FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);
[FindNextFileW]
1=HANDLE hFindFile
2=LPWIN32_FIND_DATAW lpFindFileData
ParamCount=2
@=FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
[SearchPathA]
1=LPCSTR lpPath
2=LPCSTR lpFileName
3=LPCSTR lpExtension
4=DWORD nBufferLength
5=LPSTR lpBuffer
6=LPSTR *lpFilePart
ParamCount=6
@=SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
[SearchPathW]
1=LPCWSTR lpPath
2=LPCWSTR lpFileName
3=LPCWSTR lpExtension
4=DWORD nBufferLength
5=LPWSTR lpBuffer
6=LPWSTR *lpFilePart
ParamCount=6
@=SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
[CopyFileA]
1=LPCSTR lpExistingFileName
2=LPCSTR lpNewFileName
3=BOOL bFailIfExists
ParamCount=3
@=CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists);
[CopyFileW]
1=LPCWSTR lpExistingFileName
2=LPCWSTR lpNewFileName
3=BOOL bFailIfExists
ParamCount=3
@=CopyFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists);
[CopyFileExA]
1=LPCSTR lpExistingFileName
2=LPCSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=LPBOOL pbCancel
6=DWORD dwCopyFlags
ParamCount=6
@=CopyFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
[CopyFileExW]
1=LPCWSTR lpExistingFileName
2=LPCWSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=LPBOOL pbCancel
6=DWORD dwCopyFlags
ParamCount=6
@=CopyFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
[CopyFileTransactedA]
1=LPCSTR lpExistingFileName
2=LPCSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=LPBOOL pbCancel
6=DWORD dwCopyFlags
7=HANDLE hTransaction
ParamCount=7
@=CopyFileTransactedA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction);
[CopyFileTransactedW]
1=LPCWSTR lpExistingFileName
2=LPCWSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=LPBOOL pbCancel
6=DWORD dwCopyFlags
7=HANDLE hTransaction
ParamCount=7
@=CopyFileTransactedW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction);
[MoveFileA]
1=LPCSTR lpExistingFileName
2=LPCSTR lpNewFileName
ParamCount=2
@=MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName);
[MoveFileW]
1=LPCWSTR lpExistingFileName
2=LPCWSTR lpNewFileName
ParamCount=2
@=MoveFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);
[MoveFileExA]
1=LPCSTR lpExistingFileName
2=LPCSTR lpNewFileName
3=DWORD dwFlags
ParamCount=3
@=MoveFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags);
[MoveFileExW]
1=LPCWSTR lpExistingFileName
2=LPCWSTR lpNewFileName
3=DWORD dwFlags
ParamCount=3
@=MoveFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags);
[MoveFileWithProgressA]
1=LPCSTR lpExistingFileName
2=LPCSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=DWORD dwFlags
ParamCount=5
@=MoveFileWithProgressA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
[MoveFileWithProgressW]
1=LPCWSTR lpExistingFileName
2=LPCWSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=DWORD dwFlags
ParamCount=5
@=MoveFileWithProgressW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
[MoveFileTransactedA]
1=LPCSTR lpExistingFileName
2=LPCSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=DWORD dwFlags
6=HANDLE hTransaction
ParamCount=6
@=MoveFileTransactedA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction);
[MoveFileTransactedW]
1=LPCWSTR lpExistingFileName
2=LPCWSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=DWORD dwFlags
6=HANDLE hTransaction
ParamCount=6
@=MoveFileTransactedW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction);
[ReplaceFileA]
1=LPCSTR lpReplacedFileName
2=LPCSTR lpReplacementFileName
3=LPCSTR lpBackupFileName
4=DWORD dwReplaceFlags
5=LPVOID lpExclude
6=LPVOID lpReserved
ParamCount=6
@=ReplaceFileA(LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
[ReplaceFileW]
1=LPCWSTR lpReplacedFileName
2=LPCWSTR lpReplacementFileName
3=LPCWSTR lpBackupFileName
4=DWORD dwReplaceFlags
5=LPVOID lpExclude
6=LPVOID lpReserved
ParamCount=6
@=ReplaceFileW(LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
[CreateHardLinkA]
1=LPCSTR lpFileName
2=LPCSTR lpExistingFileName
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=3
@=CreateHardLinkA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[CreateHardLinkW]
1=LPCWSTR lpFileName
2=LPCWSTR lpExistingFileName
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=3
@=CreateHardLinkW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[CreateHardLinkTransactedA]
1=LPCSTR lpFileName
2=LPCSTR lpExistingFileName
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
4=HANDLE hTransaction
ParamCount=4
@=CreateHardLinkTransactedA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction);
[CreateHardLinkTransactedW]
1=LPCWSTR lpFileName
2=LPCWSTR lpExistingFileName
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
4=HANDLE hTransaction
ParamCount=4
@=CreateHardLinkTransactedW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction);
[FindFirstStreamW]
1=LPCWSTR lpFileName
2=STREAM_INFO_LEVELS InfoLevel
3=LPVOID lpFindStreamData
4=DWORD dwFlags
ParamCount=4
@=FindFirstStreamW(LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags);
[FindFirstStreamTransactedW]
1=LPCWSTR lpFileName
2=STREAM_INFO_LEVELS InfoLevel
3=LPVOID lpFindStreamData
4=DWORD dwFlags
5=HANDLE hTransaction
ParamCount=5
@=FindFirstStreamTransactedW(LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags, HANDLE hTransaction);
[FindNextStreamW]
1=HANDLE hFindStream
2=LPVOID lpFindStreamData
ParamCount=2
@=FindNextStreamW(HANDLE hFindStream, LPVOID lpFindStreamData);
[FindFirstFileNameW]
1=LPCWSTR lpFileName
2=DWORD dwFlags
3=LPDWORD StringLength
4=PWCHAR LinkName
ParamCount=4
@=FindFirstFileNameW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWCHAR LinkName);
[FindNextFileNameW]
1=HANDLE hFindStream
2=LPDWORD StringLength
3=PWCHAR LinkName
ParamCount=3
@=FindNextFileNameW(HANDLE hFindStream, LPDWORD StringLength, PWCHAR LinkName);
[FindFirstFileNameTransactedW]
1=LPCWSTR lpFileName
2=DWORD dwFlags
3=LPDWORD StringLength
4=PWCHAR LinkName
5=HANDLE hTransaction
ParamCount=5
@=FindFirstFileNameTransactedW(LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWCHAR LinkName, HANDLE hTransaction);
[CreateNamedPipeA]
1=LPCSTR lpName
2=DWORD dwOpenMode
3=DWORD dwPipeMode
4=DWORD nMaxInstances
5=DWORD nOutBufferSize
6=DWORD nInBufferSize
7=DWORD nDefaultTimeOut
8=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=8
@=CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[CreateNamedPipeW]
1=LPCWSTR lpName
2=DWORD dwOpenMode
3=DWORD dwPipeMode
4=DWORD nMaxInstances
5=DWORD nOutBufferSize
6=DWORD nInBufferSize
7=DWORD nDefaultTimeOut
8=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=8
@=CreateNamedPipeW(LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
[GetNamedPipeHandleStateA]
1=HANDLE hNamedPipe
2=LPDWORD lpState
3=LPDWORD lpCurInstances
4=LPDWORD lpMaxCollectionCount
5=LPDWORD lpCollectDataTimeout
6=LPSTR lpUserName
7=DWORD nMaxUserNameSize
ParamCount=7
@=GetNamedPipeHandleStateA(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize);
[GetNamedPipeHandleStateW]
1=HANDLE hNamedPipe
2=LPDWORD lpState
3=LPDWORD lpCurInstances
4=LPDWORD lpMaxCollectionCount
5=LPDWORD lpCollectDataTimeout
6=LPWSTR lpUserName
7=DWORD nMaxUserNameSize
ParamCount=7
@=GetNamedPipeHandleStateW(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize);
[CallNamedPipeA]
1=LPCSTR lpNamedPipeName
2=LPVOID lpInBuffer
3=DWORD nInBufferSize
4=LPVOID lpOutBuffer
5=DWORD nOutBufferSize
6=LPDWORD lpBytesRead
7=DWORD nTimeOut
ParamCount=7
@=CallNamedPipeA(LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
[CallNamedPipeW]
1=LPCWSTR lpNamedPipeName
2=LPVOID lpInBuffer
3=DWORD nInBufferSize
4=LPVOID lpOutBuffer
5=DWORD nOutBufferSize
6=LPDWORD lpBytesRead
7=DWORD nTimeOut
ParamCount=7
@=CallNamedPipeW(LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
[WaitNamedPipeA]
1=LPCSTR lpNamedPipeName
2=DWORD nTimeOut
ParamCount=2
@=WaitNamedPipeA(LPCSTR lpNamedPipeName, DWORD nTimeOut);
[WaitNamedPipeW]
1=LPCWSTR lpNamedPipeName
2=DWORD nTimeOut
ParamCount=2
@=WaitNamedPipeW(LPCWSTR lpNamedPipeName, DWORD nTimeOut);
[GetNamedPipeAttribute]
1=HANDLE Pipe
2=PIPE_ATTRIBUTE_TYPE AttributeType
3=PSTR AttributeName
4=PVOID AttributeValue
5=PSIZE_T AttributeValueLength
ParamCount=5
@=GetNamedPipeAttribute(HANDLE Pipe, PIPE_ATTRIBUTE_TYPE AttributeType, PSTR AttributeName, PVOID AttributeValue, PSIZE_T AttributeValueLength);
[SetNamedPipeAttribute]
1=HANDLE Pipe
2=PIPE_ATTRIBUTE_TYPE AttributeType
3=PSTR AttributeName
4=PVOID AttributeValue
5=SIZE_T AttributeValueLength
ParamCount=5
@=SetNamedPipeAttribute(HANDLE Pipe, PIPE_ATTRIBUTE_TYPE AttributeType, PSTR AttributeName, PVOID AttributeValue, SIZE_T AttributeValueLength);
[GetNamedPipeClientComputerNameA]
1=HANDLE Pipe
2=LPSTR ClientComputerName
3=ULONG ClientComputerNameLength
ParamCount=3
@=GetNamedPipeClientComputerNameA(HANDLE Pipe, LPSTR ClientComputerName, ULONG ClientComputerNameLength);
[GetNamedPipeClientComputerNameW]
1=HANDLE Pipe
2=LPWSTR ClientComputerName
3=ULONG ClientComputerNameLength
ParamCount=3
@=GetNamedPipeClientComputerNameW(HANDLE Pipe, LPWSTR ClientComputerName, ULONG ClientComputerNameLength);
[GetNamedPipeClientProcessId]
1=HANDLE Pipe
2=PULONG ClientProcessId
ParamCount=2
@=GetNamedPipeClientProcessId(HANDLE Pipe, PULONG ClientProcessId);
[GetNamedPipeClientSessionId]
1=HANDLE Pipe
2=PULONG ClientSessionId
ParamCount=2
@=GetNamedPipeClientSessionId(HANDLE Pipe, PULONG ClientSessionId);
[GetNamedPipeServerProcessId]
1=HANDLE Pipe
2=PULONG ServerProcessId
ParamCount=2
@=GetNamedPipeServerProcessId(HANDLE Pipe, PULONG ServerProcessId);
[GetNamedPipeServerSessionId]
1=HANDLE Pipe
2=PULONG ServerSessionId
ParamCount=2
@=GetNamedPipeServerSessionId(HANDLE Pipe, PULONG ServerSessionId);
[SetVolumeLabelA]
1=LPCSTR lpRootPathName
2=LPCSTR lpVolumeName
ParamCount=2
@=SetVolumeLabelA(LPCSTR lpRootPathName, LPCSTR lpVolumeName);
[SetVolumeLabelW]
1=LPCWSTR lpRootPathName
2=LPCWSTR lpVolumeName
ParamCount=2
@=SetVolumeLabelW(LPCWSTR lpRootPathName, LPCWSTR lpVolumeName);
[SetFileApisToOEM]
ParamCount=0
@=SetFileApisToOEM();
[SetFileApisToANSI]
ParamCount=0
@=SetFileApisToANSI();
[AreFileApisANSI]
ParamCount=0
@=AreFileApisANSI();
[GetVolumeInformationA]
1=LPCSTR lpRootPathName
2=LPSTR lpVolumeNameBuffer
3=DWORD nVolumeNameSize
4=LPDWORD lpVolumeSerialNumber
5=LPDWORD lpMaximumComponentLength
6=LPDWORD lpFileSystemFlags
7=LPSTR lpFileSystemNameBuffer
8=DWORD nFileSystemNameSize
ParamCount=8
@=GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
[GetVolumeInformationW]
1=LPCWSTR lpRootPathName
2=LPWSTR lpVolumeNameBuffer
3=DWORD nVolumeNameSize
4=LPDWORD lpVolumeSerialNumber
5=LPDWORD lpMaximumComponentLength
6=LPDWORD lpFileSystemFlags
7=LPWSTR lpFileSystemNameBuffer
8=DWORD nFileSystemNameSize
ParamCount=8
@=GetVolumeInformationW(LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
[GetVolumeInformationByHandleW]
1=HANDLE hFile
2=LPWSTR lpVolumeNameBuffer
3=DWORD nVolumeNameSize
4=LPDWORD lpVolumeSerialNumber
5=LPDWORD lpMaximumComponentLength
6=LPDWORD lpFileSystemFlags
7=LPWSTR lpFileSystemNameBuffer
8=DWORD nFileSystemNameSize
ParamCount=8
@=GetVolumeInformationByHandleW(HANDLE hFile, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
[CancelSynchronousIo]
1=HANDLE hThread
ParamCount=1
@=CancelSynchronousIo(HANDLE hThread);
[CancelIoEx]
1=HANDLE hFile
2=LPOVERLAPPED lpOverlapped
ParamCount=2
@=CancelIoEx(HANDLE hFile, LPOVERLAPPED lpOverlapped);
[CancelIo]
1=HANDLE hFile
ParamCount=1
@=CancelIo(HANDLE hFile);
[SetFileBandwidthReservation]
1=HANDLE hFile
2=DWORD nPeriodMilliseconds
3=DWORD nBytesPerPeriod
4=BOOL bDiscardable
5=LPDWORD lpTransferSize
6=LPDWORD lpNumOutstandingRequests
ParamCount=6
@=SetFileBandwidthReservation(HANDLE hFile, DWORD nPeriodMilliseconds, DWORD nBytesPerPeriod, BOOL bDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests);
[GetFileBandwidthReservation]
1=HANDLE hFile
2=LPDWORD lpPeriodMilliseconds
3=LPDWORD lpBytesPerPeriod
4=LPBOOL pDiscardable
5=LPDWORD lpTransferSize
6=LPDWORD lpNumOutstandingRequests
ParamCount=6
@=GetFileBandwidthReservation(HANDLE hFile, LPDWORD lpPeriodMilliseconds, LPDWORD lpBytesPerPeriod, LPBOOL pDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests);
[ClearEventLogA]
1=HANDLE hEventLog
2=LPCSTR lpBackupFileName
ParamCount=2
@=ClearEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName);
[ClearEventLogW]
1=HANDLE hEventLog
2=LPCWSTR lpBackupFileName
ParamCount=2
@=ClearEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName);
[BackupEventLogA]
1=HANDLE hEventLog
2=LPCSTR lpBackupFileName
ParamCount=2
@=BackupEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName);
[BackupEventLogW]
1=HANDLE hEventLog
2=LPCWSTR lpBackupFileName
ParamCount=2
@=BackupEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName);
[CloseEventLog]
1=HANDLE hEventLog
ParamCount=1
@=CloseEventLog(HANDLE hEventLog);
[DeregisterEventSource]
1=HANDLE hEventLog
ParamCount=1
@=DeregisterEventSource(HANDLE hEventLog);
[NotifyChangeEventLog]
1=HANDLE hEventLog
2=HANDLE hEvent
ParamCount=2
@=NotifyChangeEventLog(HANDLE hEventLog, HANDLE hEvent);
[GetNumberOfEventLogRecords]
1=HANDLE hEventLog
2=PDWORD NumberOfRecords
ParamCount=2
@=GetNumberOfEventLogRecords(HANDLE hEventLog, PDWORD NumberOfRecords);
[GetOldestEventLogRecord]
1=HANDLE hEventLog
2=PDWORD OldestRecord
ParamCount=2
@=GetOldestEventLogRecord(HANDLE hEventLog, PDWORD OldestRecord);
[OpenEventLogA]
1=LPCSTR lpUNCServerName
2=LPCSTR lpSourceName
ParamCount=2
@=OpenEventLogA(LPCSTR lpUNCServerName, LPCSTR lpSourceName);
[OpenEventLogW]
1=LPCWSTR lpUNCServerName
2=LPCWSTR lpSourceName
ParamCount=2
@=OpenEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
[RegisterEventSourceA]
1=LPCSTR lpUNCServerName
2=LPCSTR lpSourceName
ParamCount=2
@=RegisterEventSourceA(LPCSTR lpUNCServerName, LPCSTR lpSourceName);
[RegisterEventSourceW]
1=LPCWSTR lpUNCServerName
2=LPCWSTR lpSourceName
ParamCount=2
@=RegisterEventSourceW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
[OpenBackupEventLogA]
1=LPCSTR lpUNCServerName
2=LPCSTR lpFileName
ParamCount=2
@=OpenBackupEventLogA(LPCSTR lpUNCServerName, LPCSTR lpFileName);
[OpenBackupEventLogW]
1=LPCWSTR lpUNCServerName
2=LPCWSTR lpFileName
ParamCount=2
@=OpenBackupEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpFileName);
[ReadEventLogA]
1=HANDLE hEventLog
2=DWORD dwReadFlags
3=DWORD dwRecordOffset
4=LPVOID lpBuffer
5=DWORD nNumberOfBytesToRead
6=DWORD *pnBytesRead
7=DWORD *pnMinNumberOfBytesNeeded
ParamCount=7
@=ReadEventLogA(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
[ReadEventLogW]
1=HANDLE hEventLog
2=DWORD dwReadFlags
3=DWORD dwRecordOffset
4=LPVOID lpBuffer
5=DWORD nNumberOfBytesToRead
6=DWORD *pnBytesRead
7=DWORD *pnMinNumberOfBytesNeeded
ParamCount=7
@=ReadEventLogW(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
[ReportEventA]
1=HANDLE hEventLog
2=WORD wType
3=WORD wCategory
4=DWORD dwEventID
5=PSID lpUserSid
6=WORD wNumStrings
7=DWORD dwDataSize
8=LPCSTR *lpStrings
9=LPVOID lpRawData
ParamCount=9
@=ReportEventA(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR *lpStrings, LPVOID lpRawData);
[ReportEventW]
1=HANDLE hEventLog
2=WORD wType
3=WORD wCategory
4=DWORD dwEventID
5=PSID lpUserSid
6=WORD wNumStrings
7=DWORD dwDataSize
8=LPCWSTR *lpStrings
9=LPVOID lpRawData
ParamCount=9
@=ReportEventW(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR *lpStrings, LPVOID lpRawData);
[GetEventLogInformation]
1=HANDLE hEventLog
2=DWORD dwInfoLevel
3=LPVOID lpBuffer
4=DWORD cbBufSize
5=LPDWORD pcbBytesNeeded
ParamCount=5
@=GetEventLogInformation(HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
[DuplicateToken]
1=HANDLE ExistingTokenHandle
2=SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
3=PHANDLE DuplicateTokenHandle
ParamCount=3
@=DuplicateToken(HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle);
[GetKernelObjectSecurity]
1=HANDLE Handle
2=SECURITY_INFORMATION RequestedInformation
3=PSECURITY_DESCRIPTOR pSecurityDescriptor
4=DWORD nLength
5=LPDWORD lpnLengthNeeded
ParamCount=5
@=GetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
[ImpersonateNamedPipeClient]
1=HANDLE hNamedPipe
ParamCount=1
@=ImpersonateNamedPipeClient(HANDLE hNamedPipe);
[ImpersonateSelf]
1=SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
ParamCount=1
@=ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
[RevertToSelf]
ParamCount=0
@=RevertToSelf();
[SetThreadToken]
1=PHANDLE Thread
2=HANDLE Token
ParamCount=2
@=SetThreadToken(PHANDLE Thread, HANDLE Token);
[AccessCheck]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=HANDLE ClientToken
3=DWORD DesiredAccess
4=PGENERIC_MAPPING GenericMapping
5=PPRIVILEGE_SET PrivilegeSet
6=LPDWORD PrivilegeSetLength
7=LPDWORD GrantedAccess
8=LPBOOL AccessStatus
ParamCount=8
@=AccessCheck(PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
[AccessCheckByType]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=PSID PrincipalSelfSid
3=HANDLE ClientToken
4=DWORD DesiredAccess
5=POBJECT_TYPE_LIST ObjectTypeList
6=DWORD ObjectTypeListLength
7=PGENERIC_MAPPING GenericMapping
8=PPRIVILEGE_SET PrivilegeSet
9=LPDWORD PrivilegeSetLength
10=LPDWORD GrantedAccess
11=LPBOOL AccessStatus
ParamCount=11
@=AccessCheckByType(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
[AccessCheckByTypeResultList]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=PSID PrincipalSelfSid
3=HANDLE ClientToken
4=DWORD DesiredAccess
5=POBJECT_TYPE_LIST ObjectTypeList
6=DWORD ObjectTypeListLength
7=PGENERIC_MAPPING GenericMapping
8=PPRIVILEGE_SET PrivilegeSet
9=LPDWORD PrivilegeSetLength
10=LPDWORD GrantedAccessList
11=LPDWORD AccessStatusList
ParamCount=11
@=AccessCheckByTypeResultList(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList);
[OpenProcessToken]
1=HANDLE ProcessHandle
2=DWORD DesiredAccess
3=PHANDLE TokenHandle
ParamCount=3
@=OpenProcessToken(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
[OpenThreadToken]
1=HANDLE ThreadHandle
2=DWORD DesiredAccess
3=BOOL OpenAsSelf
4=PHANDLE TokenHandle
ParamCount=4
@=OpenThreadToken(HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle);
[GetTokenInformation]
1=HANDLE TokenHandle
2=TOKEN_INFORMATION_CLASS TokenInformationClass
3=LPVOID TokenInformation
4=DWORD TokenInformationLength
5=PDWORD ReturnLength
ParamCount=5
@=GetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
[SetTokenInformation]
1=HANDLE TokenHandle
2=TOKEN_INFORMATION_CLASS TokenInformationClass
3=LPVOID TokenInformation
4=DWORD TokenInformationLength
ParamCount=4
@=SetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength);
[AdjustTokenPrivileges]
1=HANDLE TokenHandle
2=BOOL DisableAllPrivileges
3=PTOKEN_PRIVILEGES NewState
4=DWORD BufferLength
5=PTOKEN_PRIVILEGES PreviousState
6=PDWORD ReturnLength
ParamCount=6
@=AdjustTokenPrivileges(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
[AdjustTokenGroups]
1=HANDLE TokenHandle
2=BOOL ResetToDefault
3=PTOKEN_GROUPS NewState
4=DWORD BufferLength
5=PTOKEN_GROUPS PreviousState
6=PDWORD ReturnLength
ParamCount=6
@=AdjustTokenGroups(HANDLE TokenHandle, BOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength);
[PrivilegeCheck]
1=HANDLE ClientToken
2=PPRIVILEGE_SET RequiredPrivileges
3=LPBOOL pfResult
ParamCount=3
@=PrivilegeCheck(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult);
[AccessCheckAndAuditAlarmA]
1=LPCSTR SubsystemName
2=LPVOID HandleId
3=LPSTR ObjectTypeName
4=LPSTR ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=DWORD DesiredAccess
7=PGENERIC_MAPPING GenericMapping
8=BOOL ObjectCreation
9=LPDWORD GrantedAccess
10=LPBOOL AccessStatus
11=LPBOOL pfGenerateOnClose
ParamCount=11
@=AccessCheckAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
[AccessCheckAndAuditAlarmW]
1=LPCWSTR SubsystemName
2=LPVOID HandleId
3=LPWSTR ObjectTypeName
4=LPWSTR ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=DWORD DesiredAccess
7=PGENERIC_MAPPING GenericMapping
8=BOOL ObjectCreation
9=LPDWORD GrantedAccess
10=LPBOOL AccessStatus
11=LPBOOL pfGenerateOnClose
ParamCount=11
@=AccessCheckAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
[AccessCheckByTypeAndAuditAlarmA]
1=LPCSTR SubsystemName
2=LPVOID HandleId
3=LPCSTR ObjectTypeName
4=LPCSTR ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=PSID PrincipalSelfSid
7=DWORD DesiredAccess
8=AUDIT_EVENT_TYPE AuditType
9=DWORD Flags
10=POBJECT_TYPE_LIST ObjectTypeList
11=DWORD ObjectTypeListLength
12=PGENERIC_MAPPING GenericMapping
13=BOOL ObjectCreation
14=LPDWORD GrantedAccess
15=LPBOOL AccessStatus
16=LPBOOL pfGenerateOnClose
ParamCount=16
@=AccessCheckByTypeAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
[AccessCheckByTypeAndAuditAlarmW]
1=LPCWSTR SubsystemName
2=LPVOID HandleId
3=LPCWSTR ObjectTypeName
4=LPCWSTR ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=PSID PrincipalSelfSid
7=DWORD DesiredAccess
8=AUDIT_EVENT_TYPE AuditType
9=DWORD Flags
10=POBJECT_TYPE_LIST ObjectTypeList
11=DWORD ObjectTypeListLength
12=PGENERIC_MAPPING GenericMapping
13=BOOL ObjectCreation
14=LPDWORD GrantedAccess
15=LPBOOL AccessStatus
16=LPBOOL pfGenerateOnClose
ParamCount=16
@=AccessCheckByTypeAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
[AccessCheckByTypeResultListAndAuditAlarmA]
1=LPCSTR SubsystemName
2=LPVOID HandleId
3=LPCSTR ObjectTypeName
4=LPCSTR ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=PSID PrincipalSelfSid
7=DWORD DesiredAccess
8=AUDIT_EVENT_TYPE AuditType
9=DWORD Flags
10=POBJECT_TYPE_LIST ObjectTypeList
11=DWORD ObjectTypeListLength
12=PGENERIC_MAPPING GenericMapping
13=BOOL ObjectCreation
14=LPDWORD GrantedAccess
15=LPDWORD AccessStatusList
16=LPBOOL pfGenerateOnClose
ParamCount=16
@=AccessCheckByTypeResultListAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
[AccessCheckByTypeResultListAndAuditAlarmW]
1=LPCWSTR SubsystemName
2=LPVOID HandleId
3=LPCWSTR ObjectTypeName
4=LPCWSTR ObjectName
5=PSECURITY_DESCRIPTOR SecurityDescriptor
6=PSID PrincipalSelfSid
7=DWORD DesiredAccess
8=AUDIT_EVENT_TYPE AuditType
9=DWORD Flags
10=POBJECT_TYPE_LIST ObjectTypeList
11=DWORD ObjectTypeListLength
12=PGENERIC_MAPPING GenericMapping
13=BOOL ObjectCreation
14=LPDWORD GrantedAccess
15=LPDWORD AccessStatusList
16=LPBOOL pfGenerateOnClose
ParamCount=16
@=AccessCheckByTypeResultListAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
[AccessCheckByTypeResultListAndAuditAlarmByHandleA]
1=LPCSTR SubsystemName
2=LPVOID HandleId
3=HANDLE ClientToken
4=LPCSTR ObjectTypeName
5=LPCSTR ObjectName
6=PSECURITY_DESCRIPTOR SecurityDescriptor
7=PSID PrincipalSelfSid
8=DWORD DesiredAccess
9=AUDIT_EVENT_TYPE AuditType
10=DWORD Flags
11=POBJECT_TYPE_LIST ObjectTypeList
12=DWORD ObjectTypeListLength
13=PGENERIC_MAPPING GenericMapping
14=BOOL ObjectCreation
15=LPDWORD GrantedAccess
16=LPDWORD AccessStatusList
17=LPBOOL pfGenerateOnClose
ParamCount=17
@=AccessCheckByTypeResultListAndAuditAlarmByHandleA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
[AccessCheckByTypeResultListAndAuditAlarmByHandleW]
1=LPCWSTR SubsystemName
2=LPVOID HandleId
3=HANDLE ClientToken
4=LPCWSTR ObjectTypeName
5=LPCWSTR ObjectName
6=PSECURITY_DESCRIPTOR SecurityDescriptor
7=PSID PrincipalSelfSid
8=DWORD DesiredAccess
9=AUDIT_EVENT_TYPE AuditType
10=DWORD Flags
11=POBJECT_TYPE_LIST ObjectTypeList
12=DWORD ObjectTypeListLength
13=PGENERIC_MAPPING GenericMapping
14=BOOL ObjectCreation
15=LPDWORD GrantedAccess
16=LPDWORD AccessStatusList
17=LPBOOL pfGenerateOnClose
ParamCount=17
@=AccessCheckByTypeResultListAndAuditAlarmByHandleW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
[ObjectOpenAuditAlarmA]
1=LPCSTR SubsystemName
2=LPVOID HandleId
3=LPSTR ObjectTypeName
4=LPSTR ObjectName
5=PSECURITY_DESCRIPTOR pSecurityDescriptor
6=HANDLE ClientToken
7=DWORD DesiredAccess
8=DWORD GrantedAccess
9=PPRIVILEGE_SET Privileges
10=BOOL ObjectCreation
11=BOOL AccessGranted
12=LPBOOL GenerateOnClose
ParamCount=12
@=ObjectOpenAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, BOOL ObjectCreation, BOOL AccessGranted, LPBOOL GenerateOnClose);
[ObjectOpenAuditAlarmW]
1=LPCWSTR SubsystemName
2=LPVOID HandleId
3=LPWSTR ObjectTypeName
4=LPWSTR ObjectName
5=PSECURITY_DESCRIPTOR pSecurityDescriptor
6=HANDLE ClientToken
7=DWORD DesiredAccess
8=DWORD GrantedAccess
9=PPRIVILEGE_SET Privileges
10=BOOL ObjectCreation
11=BOOL AccessGranted
12=LPBOOL GenerateOnClose
ParamCount=12
@=ObjectOpenAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, BOOL ObjectCreation, BOOL AccessGranted, LPBOOL GenerateOnClose);
[ObjectPrivilegeAuditAlarmA]
1=LPCSTR SubsystemName
2=LPVOID HandleId
3=HANDLE ClientToken
4=DWORD DesiredAccess
5=PPRIVILEGE_SET Privileges
6=BOOL AccessGranted
ParamCount=6
@=ObjectPrivilegeAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, BOOL AccessGranted);
[ObjectPrivilegeAuditAlarmW]
1=LPCWSTR SubsystemName
2=LPVOID HandleId
3=HANDLE ClientToken
4=DWORD DesiredAccess
5=PPRIVILEGE_SET Privileges
6=BOOL AccessGranted
ParamCount=6
@=ObjectPrivilegeAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, BOOL AccessGranted);
[ObjectCloseAuditAlarmA]
1=LPCSTR SubsystemName
2=LPVOID HandleId
3=BOOL GenerateOnClose
ParamCount=3
@=ObjectCloseAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose);
[ObjectCloseAuditAlarmW]
1=LPCWSTR SubsystemName
2=LPVOID HandleId
3=BOOL GenerateOnClose
ParamCount=3
@=ObjectCloseAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose);
[ObjectDeleteAuditAlarmA]
1=LPCSTR SubsystemName
2=LPVOID HandleId
3=BOOL GenerateOnClose
ParamCount=3
@=ObjectDeleteAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose);
[ObjectDeleteAuditAlarmW]
1=LPCWSTR SubsystemName
2=LPVOID HandleId
3=BOOL GenerateOnClose
ParamCount=3
@=ObjectDeleteAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose);
[PrivilegedServiceAuditAlarmA]
1=LPCSTR SubsystemName
2=LPCSTR ServiceName
3=HANDLE ClientToken
4=PPRIVILEGE_SET Privileges
5=BOOL AccessGranted
ParamCount=5
@=PrivilegedServiceAuditAlarmA(LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOL AccessGranted);
[PrivilegedServiceAuditAlarmW]
1=LPCWSTR SubsystemName
2=LPCWSTR ServiceName
3=HANDLE ClientToken
4=PPRIVILEGE_SET Privileges
5=BOOL AccessGranted
ParamCount=5
@=PrivilegedServiceAuditAlarmW(LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOL AccessGranted);
[IsWellKnownSid]
1=PSID pSid
2=WELL_KNOWN_SID_TYPE WellKnownSidType
ParamCount=2
@=IsWellKnownSid(PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType);
[CreateWellKnownSid]
1=WELL_KNOWN_SID_TYPE WellKnownSidType
2=PSID DomainSid
3=PSID pSid
4=DWORD *cbSid
ParamCount=4
@=CreateWellKnownSid(WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD *cbSid);
[EqualDomainSid]
1=PSID pSid1
2=PSID pSid2
3=BOOL *pfEqual
ParamCount=3
@=EqualDomainSid(PSID pSid1, PSID pSid2, BOOL *pfEqual);
[GetWindowsAccountDomainSid]
1=PSID pSid
2=PSID pDomainSid
3=DWORD* cbDomainSid
ParamCount=3
@=GetWindowsAccountDomainSid(PSID pSid, PSID pDomainSid, DWORD* cbDomainSid);
[IsValidSid]
1=PSID pSid
ParamCount=1
@=IsValidSid(PSID pSid);
[EqualSid]
1=PSID pSid1
2=PSID pSid2
ParamCount=2
@=EqualSid(PSID pSid1, PSID pSid2);
[EqualPrefixSid]
1=PSID pSid1
2=PSID pSid2
ParamCount=2
@=EqualPrefixSid(PSID pSid1, PSID pSid2);
[GetSidLengthRequired]
1=UCHAR nSubAuthorityCount
ParamCount=1
@=GetSidLengthRequired(UCHAR nSubAuthorityCount);
[AllocateAndInitializeSid]
1=PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority
2=BYTE nSubAuthorityCount
3=DWORD nSubAuthority0
4=DWORD nSubAuthority1
5=DWORD nSubAuthority2
6=DWORD nSubAuthority3
7=DWORD nSubAuthority4
8=DWORD nSubAuthority5
9=DWORD nSubAuthority6
10=DWORD nSubAuthority7
11=PSID *pSid
ParamCount=11
@=AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid);
[FreeSid]
1=PSID pSid
ParamCount=1
@=FreeSid(PSID pSid);
[InitializeSid]
1=PSID Sid
2=PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority
3=BYTE nSubAuthorityCount
ParamCount=3
@=InitializeSid(PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount);
[GetSidIdentifierAuthority]
1=PSID pSid
ParamCount=1
@=GetSidIdentifierAuthority(PSID pSid);
[GetSidSubAuthority]
1=PSID pSid
2=DWORD nSubAuthority
ParamCount=2
@=GetSidSubAuthority(PSID pSid, DWORD nSubAuthority);
[GetSidSubAuthorityCount]
1=PSID pSid
ParamCount=1
@=GetSidSubAuthorityCount(PSID pSid);
[GetLengthSid]
1=PSID pSid
ParamCount=1
@=GetLengthSid(PSID pSid);
[CopySid]
1=DWORD nDestinationSidLength
2=PSID pDestinationSid
3=PSID pSourceSid
ParamCount=3
@=CopySid(DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid);
[AreAllAccessesGranted]
1=DWORD GrantedAccess
2=DWORD DesiredAccess
ParamCount=2
@=AreAllAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess);
[AreAnyAccessesGranted]
1=DWORD GrantedAccess
2=DWORD DesiredAccess
ParamCount=2
@=AreAnyAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess);
[MapGenericMask]
1=PDWORD AccessMask
2=PGENERIC_MAPPING GenericMapping
ParamCount=2
@=MapGenericMask(PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
[IsValidAcl]
1=PACL pAcl
ParamCount=1
@=IsValidAcl(PACL pAcl);
[InitializeAcl]
1=PACL pAcl
2=DWORD nAclLength
3=DWORD dwAclRevision
ParamCount=3
@=InitializeAcl(PACL pAcl, DWORD nAclLength, DWORD dwAclRevision);
[GetAclInformation]
1=PACL pAcl
2=LPVOID pAclInformation
3=DWORD nAclInformationLength
4=ACL_INFORMATION_CLASS dwAclInformationClass
ParamCount=4
@=GetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
[SetAclInformation]
1=PACL pAcl
2=LPVOID pAclInformation
3=DWORD nAclInformationLength
4=ACL_INFORMATION_CLASS dwAclInformationClass
ParamCount=4
@=SetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
[AddAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD dwStartingAceIndex
4=LPVOID pAceList
5=DWORD nAceListLength
ParamCount=5
@=AddAce(PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength);
[DeleteAce]
1=PACL pAcl
2=DWORD dwAceIndex
ParamCount=2
@=DeleteAce(PACL pAcl, DWORD dwAceIndex);
[GetAce]
1=PACL pAcl
2=DWORD dwAceIndex
3=LPVOID *pAce
ParamCount=3
@=GetAce(PACL pAcl, DWORD dwAceIndex, LPVOID *pAce);
[AddAccessAllowedAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AccessMask
4=PSID pSid
ParamCount=4
@=AddAccessAllowedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
[AddAccessAllowedAceEx]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AceFlags
4=DWORD AccessMask
5=PSID pSid
ParamCount=5
@=AddAccessAllowedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
[AddMandatoryAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AceFlags
4=DWORD MandatoryPolicy
5=PSID pLabelSid
ParamCount=5
@=AddMandatoryAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD MandatoryPolicy, PSID pLabelSid);
[AddConditionalAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AceFlags
4=UCHAR AceType
5=DWORD AccessMask
6=PSID pSid
7=PWCHAR ConditionStr
8=DWORD *ReturnLength
ParamCount=8
@=AddConditionalAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, UCHAR AceType, DWORD AccessMask, PSID pSid, PWCHAR ConditionStr, DWORD *ReturnLength);
[AddAccessDeniedAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AccessMask
4=PSID pSid
ParamCount=4
@=AddAccessDeniedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
[AddAccessDeniedAceEx]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AceFlags
4=DWORD AccessMask
5=PSID pSid
ParamCount=5
@=AddAccessDeniedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
[AddAuditAccessAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD dwAccessMask
4=PSID pSid
5=BOOL bAuditSuccess
6=BOOL bAuditFailure
ParamCount=6
@=AddAuditAccessAce(PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure);
[AddAuditAccessAceEx]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AceFlags
4=DWORD dwAccessMask
5=PSID pSid
6=BOOL bAuditSuccess
7=BOOL bAuditFailure
ParamCount=7
@=AddAuditAccessAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure);
[AddAccessAllowedObjectAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AceFlags
4=DWORD AccessMask
5=GUID *ObjectTypeGuid
6=GUID *InheritedObjectTypeGuid
7=PSID pSid
ParamCount=7
@=AddAccessAllowedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
[AddAccessDeniedObjectAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AceFlags
4=DWORD AccessMask
5=GUID *ObjectTypeGuid
6=GUID *InheritedObjectTypeGuid
7=PSID pSid
ParamCount=7
@=AddAccessDeniedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
[AddAuditAccessObjectAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=DWORD AceFlags
4=DWORD AccessMask
5=GUID *ObjectTypeGuid
6=GUID *InheritedObjectTypeGuid
7=PSID pSid
8=BOOL bAuditSuccess
9=BOOL bAuditFailure
ParamCount=9
@=AddAuditAccessObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure);
[FindFirstFreeAce]
1=PACL pAcl
2=LPVOID *pAce
ParamCount=2
@=FindFirstFreeAce(PACL pAcl, LPVOID *pAce);
[InitializeSecurityDescriptor]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=DWORD dwRevision
ParamCount=2
@=InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
[IsValidSecurityDescriptor]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
ParamCount=1
@=IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor);
[IsValidRelativeSecurityDescriptor]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=ULONG SecurityDescriptorLength
3=SECURITY_INFORMATION RequiredInformation
ParamCount=3
@=IsValidRelativeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, ULONG SecurityDescriptorLength, SECURITY_INFORMATION RequiredInformation);
[GetSecurityDescriptorLength]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
ParamCount=1
@=GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR pSecurityDescriptor);
[GetSecurityDescriptorControl]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=PSECURITY_DESCRIPTOR_CONTROL pControl
3=LPDWORD lpdwRevision
ParamCount=3
@=GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision);
[SetSecurityDescriptorControl]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest
3=SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
ParamCount=3
@=SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
[SetSecurityDescriptorDacl]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=BOOL bDaclPresent
3=PACL pDacl
4=BOOL bDaclDefaulted
ParamCount=4
@=SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bDaclPresent, PACL pDacl, BOOL bDaclDefaulted);
[GetSecurityDescriptorDacl]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=LPBOOL lpbDaclPresent
3=PACL *pDacl
4=LPBOOL lpbDaclDefaulted
ParamCount=4
@=GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted);
[SetSecurityDescriptorSacl]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=BOOL bSaclPresent
3=PACL pSacl
4=BOOL bSaclDefaulted
ParamCount=4
@=SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bSaclPresent, PACL pSacl, BOOL bSaclDefaulted);
[GetSecurityDescriptorSacl]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=LPBOOL lpbSaclPresent
3=PACL *pSacl
4=LPBOOL lpbSaclDefaulted
ParamCount=4
@=GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted);
[SetSecurityDescriptorOwner]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=PSID pOwner
3=BOOL bOwnerDefaulted
ParamCount=3
@=SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, BOOL bOwnerDefaulted);
[GetSecurityDescriptorOwner]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=PSID *pOwner
3=LPBOOL lpbOwnerDefaulted
ParamCount=3
@=GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted);
[SetSecurityDescriptorGroup]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=PSID pGroup
3=BOOL bGroupDefaulted
ParamCount=3
@=SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, BOOL bGroupDefaulted);
[GetSecurityDescriptorGroup]
1=PSECURITY_DESCRIPTOR pSecurityDescriptor
2=PSID *pGroup
3=LPBOOL lpbGroupDefaulted
ParamCount=3
@=GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pGroup, LPBOOL lpbGroupDefaulted);
[SetSecurityDescriptorRMControl]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PUCHAR RMControl
ParamCount=2
@=SetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
[GetSecurityDescriptorRMControl]
1=PSECURITY_DESCRIPTOR SecurityDescriptor
2=PUCHAR RMControl
ParamCount=2
@=GetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
[CreatePrivateObjectSecurity]
1=PSECURITY_DESCRIPTOR ParentDescriptor
2=PSECURITY_DESCRIPTOR CreatorDescriptor
3=PSECURITY_DESCRIPTOR *NewDescriptor
4=BOOL IsDirectoryObject
5=HANDLE Token
6=PGENERIC_MAPPING GenericMapping
ParamCount=6
@=CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, BOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping);
[ConvertToAutoInheritPrivateObjectSecurity]
1=PSECURITY_DESCRIPTOR ParentDescriptor
2=PSECURITY_DESCRIPTOR CurrentSecurityDescriptor
3=PSECURITY_DESCRIPTOR *NewSecurityDescriptor
4=GUID *ObjectType
5=BOOLEAN IsDirectoryObject
6=PGENERIC_MAPPING GenericMapping
ParamCount=6
@=ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping);
[CreatePrivateObjectSecurityEx]
1=PSECURITY_DESCRIPTOR ParentDescriptor
2=PSECURITY_DESCRIPTOR CreatorDescriptor
3=PSECURITY_DESCRIPTOR *NewDescriptor
4=GUID *ObjectType
5=BOOL IsContainerObject
6=ULONG AutoInheritFlags
7=HANDLE Token
8=PGENERIC_MAPPING GenericMapping
ParamCount=8
@=CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID *ObjectType, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
[CreatePrivateObjectSecurityWithMultipleInheritance]
1=PSECURITY_DESCRIPTOR ParentDescriptor
2=PSECURITY_DESCRIPTOR CreatorDescriptor
3=PSECURITY_DESCRIPTOR *NewDescriptor
4=GUID **ObjectTypes
5=ULONG GuidCount
6=BOOL IsContainerObject
7=ULONG AutoInheritFlags
8=HANDLE Token
9=PGENERIC_MAPPING GenericMapping
ParamCount=9
@=CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID **ObjectTypes, ULONG GuidCount, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
[SetPrivateObjectSecurity]
1=SECURITY_INFORMATION SecurityInformation
2=PSECURITY_DESCRIPTOR ModificationDescriptor
3=PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor
4=PGENERIC_MAPPING GenericMapping
5=HANDLE Token
ParamCount=5
@=SetPrivateObjectSecurity(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token);
[SetPrivateObjectSecurityEx]
1=SECURITY_INFORMATION SecurityInformation
2=PSECURITY_DESCRIPTOR ModificationDescriptor
3=PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor
4=ULONG AutoInheritFlags
5=PGENERIC_MAPPING GenericMapping
6=HANDLE Token
ParamCount=6
@=SetPrivateObjectSecurityEx(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token);
[GetPrivateObjectSecurity]
1=PSECURITY_DESCRIPTOR ObjectDescriptor
2=SECURITY_INFORMATION SecurityInformation
3=PSECURITY_DESCRIPTOR ResultantDescriptor
4=DWORD DescriptorLength
5=PDWORD ReturnLength
ParamCount=5
@=GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength);
[DestroyPrivateObjectSecurity]
1=PSECURITY_DESCRIPTOR *ObjectDescriptor
ParamCount=1
@=DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR *ObjectDescriptor);
[MakeSelfRelativeSD]
1=PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor
2=PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor
3=LPDWORD lpdwBufferLength
ParamCount=3
@=MakeSelfRelativeSD(PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength);
[MakeAbsoluteSD]
1=PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor
2=PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor
3=LPDWORD lpdwAbsoluteSecurityDescriptorSize
4=PACL pDacl
5=LPDWORD lpdwDaclSize
6=PACL pSacl
7=LPDWORD lpdwSaclSize
8=PSID pOwner
9=LPDWORD lpdwOwnerSize
10=PSID pPrimaryGroup
11=LPDWORD lpdwPrimaryGroupSize
ParamCount=11
@=MakeAbsoluteSD(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize);
[MakeAbsoluteSD2]
1=PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor
2=LPDWORD lpdwBufferSize
ParamCount=2
@=MakeAbsoluteSD2(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferSize);
[QuerySecurityAccessMask]
1=SECURITY_INFORMATION SecurityInformation
2=LPDWORD DesiredAccess
ParamCount=2
@=QuerySecurityAccessMask(SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess);
[SetSecurityAccessMask]
1=SECURITY_INFORMATION SecurityInformation
2=LPDWORD DesiredAccess
ParamCount=2
@=SetSecurityAccessMask(SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess);
[SetFileSecurityA]
1=LPCSTR lpFileName
2=SECURITY_INFORMATION SecurityInformation
3=PSECURITY_DESCRIPTOR pSecurityDescriptor
ParamCount=3
@=SetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
[SetFileSecurityW]
1=LPCWSTR lpFileName
2=SECURITY_INFORMATION SecurityInformation
3=PSECURITY_DESCRIPTOR pSecurityDescriptor
ParamCount=3
@=SetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
[GetFileSecurityA]
1=LPCSTR lpFileName
2=SECURITY_INFORMATION RequestedInformation
3=PSECURITY_DESCRIPTOR pSecurityDescriptor
4=DWORD nLength
5=LPDWORD lpnLengthNeeded
ParamCount=5
@=GetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
[GetFileSecurityW]
1=LPCWSTR lpFileName
2=SECURITY_INFORMATION RequestedInformation
3=PSECURITY_DESCRIPTOR pSecurityDescriptor
4=DWORD nLength
5=LPDWORD lpnLengthNeeded
ParamCount=5
@=GetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
[SetKernelObjectSecurity]
1=HANDLE Handle
2=SECURITY_INFORMATION SecurityInformation
3=PSECURITY_DESCRIPTOR SecurityDescriptor
ParamCount=3
@=SetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
[FindFirstChangeNotificationA]
1=LPCSTR lpPathName
2=BOOL bWatchSubtree
3=DWORD dwNotifyFilter
ParamCount=3
@=FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter);
[FindFirstChangeNotificationW]
1=LPCWSTR lpPathName
2=BOOL bWatchSubtree
3=DWORD dwNotifyFilter
ParamCount=3
@=FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter);
[FindNextChangeNotification]
1=HANDLE hChangeHandle
ParamCount=1
@=FindNextChangeNotification(HANDLE hChangeHandle);
[FindCloseChangeNotification]
1=HANDLE hChangeHandle
ParamCount=1
@=FindCloseChangeNotification(HANDLE hChangeHandle);
[ReadDirectoryChangesW]
1=HANDLE hDirectory
2=LPVOID lpBuffer
3=DWORD nBufferLength
4=BOOL bWatchSubtree
5=DWORD dwNotifyFilter
6=LPDWORD lpBytesReturned
7=LPOVERLAPPED lpOverlapped
8=LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
ParamCount=8
@=ReadDirectoryChangesW(HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
[VirtualLock]
1=LPVOID lpAddress
2=SIZE_T dwSize
ParamCount=2
@=VirtualLock(LPVOID lpAddress, SIZE_T dwSize);
[VirtualUnlock]
1=LPVOID lpAddress
2=SIZE_T dwSize
ParamCount=2
@=VirtualUnlock(LPVOID lpAddress, SIZE_T dwSize);
[MapViewOfFileEx]
1=HANDLE hFileMappingObject
2=DWORD dwDesiredAccess
3=DWORD dwFileOffsetHigh
4=DWORD dwFileOffsetLow
5=SIZE_T dwNumberOfBytesToMap
6=LPVOID lpBaseAddress
ParamCount=6
@=MapViewOfFileEx(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress);
[MapViewOfFileExNuma]
1=HANDLE hFileMappingObject
2=DWORD dwDesiredAccess
3=DWORD dwFileOffsetHigh
4=DWORD dwFileOffsetLow
5=SIZE_T dwNumberOfBytesToMap
6=LPVOID lpBaseAddress
7=DWORD nndPreferred
ParamCount=7
@=MapViewOfFileExNuma(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress, DWORD nndPreferred);
[SetPriorityClass]
1=HANDLE hProcess
2=DWORD dwPriorityClass
ParamCount=2
@=SetPriorityClass(HANDLE hProcess, DWORD dwPriorityClass);
[GetPriorityClass]
1=HANDLE hProcess
ParamCount=1
@=GetPriorityClass(HANDLE hProcess);
[IsBadReadPtr]
1=VOID *lp
2=UINT_PTR ucb
ParamCount=2
@=IsBadReadPtr(VOID *lp, UINT_PTR ucb);
[IsBadWritePtr]
1=LPVOID lp
2=UINT_PTR ucb
ParamCount=2
@=IsBadWritePtr(LPVOID lp, UINT_PTR ucb);
[IsBadHugeReadPtr]
1=VOID *lp
2=UINT_PTR ucb
ParamCount=2
@=IsBadHugeReadPtr(VOID *lp, UINT_PTR ucb);
[IsBadHugeWritePtr]
1=LPVOID lp
2=UINT_PTR ucb
ParamCount=2
@=IsBadHugeWritePtr(LPVOID lp, UINT_PTR ucb);
[IsBadCodePtr]
1=FARPROC lpfn
ParamCount=1
@=IsBadCodePtr(FARPROC lpfn);
[IsBadStringPtrA]
1=LPCSTR lpsz
2=UINT_PTR ucchMax
ParamCount=2
@=IsBadStringPtrA(LPCSTR lpsz, UINT_PTR ucchMax);
[IsBadStringPtrW]
1=LPCWSTR lpsz
2=UINT_PTR ucchMax
ParamCount=2
@=IsBadStringPtrW(LPCWSTR lpsz, UINT_PTR ucchMax);
[LookupAccountSidA]
1=LPCSTR lpSystemName
2=PSID Sid
3=LPSTR Name
4=LPDWORD cchName
5=LPSTR ReferencedDomainName
6=LPDWORD cchReferencedDomainName
7=PSID_NAME_USE peUse
ParamCount=7
@=LookupAccountSidA(LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
[LookupAccountSidW]
1=LPCWSTR lpSystemName
2=PSID Sid
3=LPWSTR Name
4=LPDWORD cchName
5=LPWSTR ReferencedDomainName
6=LPDWORD cchReferencedDomainName
7=PSID_NAME_USE peUse
ParamCount=7
@=LookupAccountSidW(LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
[LookupAccountSidLocalA]
1=PSID Sid
2=LPSTR Name
3=LPDWORD cchName
4=LPSTR ReferencedDomainName
5=LPDWORD cchReferencedDomainName
6=PSID_NAME_USE peUse
ParamCount=6
@=LookupAccountSidLocalA(PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
[LookupAccountSidLocalW]
1=PSID Sid
2=LPWSTR Name
3=LPDWORD cchName
4=LPWSTR ReferencedDomainName
5=LPDWORD cchReferencedDomainName
6=PSID_NAME_USE peUse
ParamCount=6
@=LookupAccountSidLocalW(PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
[LookupAccountNameA]
1=LPCSTR lpSystemName
2=LPCSTR lpAccountName
3=PSID Sid
4=LPDWORD cbSid
5=LPSTR ReferencedDomainName
6=LPDWORD cchReferencedDomainName
7=PSID_NAME_USE peUse
ParamCount=7
@=LookupAccountNameA(LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
[LookupAccountNameW]
1=LPCWSTR lpSystemName
2=LPCWSTR lpAccountName
3=PSID Sid
4=LPDWORD cbSid
5=LPWSTR ReferencedDomainName
6=LPDWORD cchReferencedDomainName
7=PSID_NAME_USE peUse
ParamCount=7
@=LookupAccountNameW(LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
[LookupAccountNameLocalA]
1=LPCSTR lpAccountName
2=PSID Sid
3=LPDWORD cbSid
4=LPSTR ReferencedDomainName
5=LPDWORD cchReferencedDomainName
6=PSID_NAME_USE peUse
ParamCount=6
@=LookupAccountNameLocalA(LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
[LookupAccountNameLocalW]
1=LPCWSTR lpAccountName
2=PSID Sid
3=LPDWORD cbSid
4=LPWSTR ReferencedDomainName
5=LPDWORD cchReferencedDomainName
6=PSID_NAME_USE peUse
ParamCount=6
@=LookupAccountNameLocalW(LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
[LookupPrivilegeValueA]
1=LPCSTR lpSystemName
2=LPCSTR lpName
3=PLUID lpLuid
ParamCount=3
@=LookupPrivilegeValueA(LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid);
[LookupPrivilegeValueW]
1=LPCWSTR lpSystemName
2=LPCWSTR lpName
3=PLUID lpLuid
ParamCount=3
@=LookupPrivilegeValueW(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
[LookupPrivilegeNameA]
1=LPCSTR lpSystemName
2=PLUID lpLuid
3=LPSTR lpName
4=LPDWORD cchName
ParamCount=4
@=LookupPrivilegeNameA(LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName);
[LookupPrivilegeNameW]
1=LPCWSTR lpSystemName
2=PLUID lpLuid
3=LPWSTR lpName
4=LPDWORD cchName
ParamCount=4
@=LookupPrivilegeNameW(LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName);
[LookupPrivilegeDisplayNameA]
1=LPCSTR lpSystemName
2=LPCSTR lpName
3=LPSTR lpDisplayName
4=LPDWORD cchDisplayName
5=LPDWORD lpLanguageId
ParamCount=5
@=LookupPrivilegeDisplayNameA(LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
[LookupPrivilegeDisplayNameW]
1=LPCWSTR lpSystemName
2=LPCWSTR lpName
3=LPWSTR lpDisplayName
4=LPDWORD cchDisplayName
5=LPDWORD lpLanguageId
ParamCount=5
@=LookupPrivilegeDisplayNameW(LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
[AllocateLocallyUniqueId]
1=PLUID Luid
ParamCount=1
@=AllocateLocallyUniqueId(PLUID Luid);
[BuildCommDCBA]
1=LPCSTR lpDef
2=LPDCB lpDCB
ParamCount=2
@=BuildCommDCBA(LPCSTR lpDef, LPDCB lpDCB);
[BuildCommDCBW]
1=LPCWSTR lpDef
2=LPDCB lpDCB
ParamCount=2
@=BuildCommDCBW(LPCWSTR lpDef, LPDCB lpDCB);
[BuildCommDCBAndTimeoutsA]
1=LPCSTR lpDef
2=LPDCB lpDCB
3=LPCOMMTIMEOUTS lpCommTimeouts
ParamCount=3
@=BuildCommDCBAndTimeoutsA(LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
[BuildCommDCBAndTimeoutsW]
1=LPCWSTR lpDef
2=LPDCB lpDCB
3=LPCOMMTIMEOUTS lpCommTimeouts
ParamCount=3
@=BuildCommDCBAndTimeoutsW(LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
[CommConfigDialogA]
1=LPCSTR lpszName
2=HWND hWnd
3=LPCOMMCONFIG lpCC
ParamCount=3
@=CommConfigDialogA(LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
[CommConfigDialogW]
1=LPCWSTR lpszName
2=HWND hWnd
3=LPCOMMCONFIG lpCC
ParamCount=3
@=CommConfigDialogW(LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
[GetDefaultCommConfigA]
1=LPCSTR lpszName
2=LPCOMMCONFIG lpCC
3=LPDWORD lpdwSize
ParamCount=3
@=GetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
[GetDefaultCommConfigW]
1=LPCWSTR lpszName
2=LPCOMMCONFIG lpCC
3=LPDWORD lpdwSize
ParamCount=3
@=GetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
[SetDefaultCommConfigA]
1=LPCSTR lpszName
2=LPCOMMCONFIG lpCC
3=DWORD dwSize
ParamCount=3
@=SetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
[SetDefaultCommConfigW]
1=LPCWSTR lpszName
2=LPCOMMCONFIG lpCC
3=DWORD dwSize
ParamCount=3
@=SetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
[GetComputerNameA]
1=LPSTR lpBuffer
2=LPDWORD nSize
ParamCount=2
@=GetComputerNameA(LPSTR lpBuffer, LPDWORD nSize);
[GetComputerNameW]
1=LPWSTR lpBuffer
2=LPDWORD nSize
ParamCount=2
@=GetComputerNameW(LPWSTR lpBuffer, LPDWORD nSize);
[SetComputerNameA]
1=LPCSTR lpComputerName
ParamCount=1
@=SetComputerNameA(LPCSTR lpComputerName);
[SetComputerNameW]
1=LPCWSTR lpComputerName
ParamCount=1
@=SetComputerNameW(LPCWSTR lpComputerName);
[GetComputerNameExA]
1=COMPUTER_NAME_FORMAT NameType
2=LPSTR lpBuffer
3=LPDWORD nSize
ParamCount=3
@=GetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize);
[GetComputerNameExW]
1=COMPUTER_NAME_FORMAT NameType
2=LPWSTR lpBuffer
3=LPDWORD nSize
ParamCount=3
@=GetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
[SetComputerNameExA]
1=COMPUTER_NAME_FORMAT NameType
2=LPCSTR lpBuffer
ParamCount=2
@=SetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPCSTR lpBuffer);
[SetComputerNameExW]
1=COMPUTER_NAME_FORMAT NameType
2=LPCWSTR lpBuffer
ParamCount=2
@=SetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer);
[DnsHostnameToComputerNameA]
1=LPCSTR Hostname
2=LPSTR ComputerName
3=LPDWORD nSize
ParamCount=3
@=DnsHostnameToComputerNameA(LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize);
[DnsHostnameToComputerNameW]
1=LPCWSTR Hostname
2=LPWSTR ComputerName
3=LPDWORD nSize
ParamCount=3
@=DnsHostnameToComputerNameW(LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize);
[GetUserNameA]
1=LPSTR lpBuffer
2=LPDWORD pcbBuffer
ParamCount=2
@=GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer);
[GetUserNameW]
1=LPWSTR lpBuffer
2=LPDWORD pcbBuffer
ParamCount=2
@=GetUserNameW(LPWSTR lpBuffer, LPDWORD pcbBuffer);
[LogonUserA]
1=LPCSTR lpszUsername
2=LPCSTR lpszDomain
3=LPCSTR lpszPassword
4=DWORD dwLogonType
5=DWORD dwLogonProvider
6=PHANDLE phToken
ParamCount=6
@=LogonUserA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
[LogonUserW]
1=LPCWSTR lpszUsername
2=LPCWSTR lpszDomain
3=LPCWSTR lpszPassword
4=DWORD dwLogonType
5=DWORD dwLogonProvider
6=PHANDLE phToken
ParamCount=6
@=LogonUserW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
[LogonUserExA]
1=LPCSTR lpszUsername
2=LPCSTR lpszDomain
3=LPCSTR lpszPassword
4=DWORD dwLogonType
5=DWORD dwLogonProvider
6=PHANDLE phToken
7=PSID *ppLogonSid
8=PVOID *ppProfileBuffer
9=LPDWORD pdwProfileLength
10=PQUOTA_LIMITS pQuotaLimits
ParamCount=10
@=LogonUserExA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
[LogonUserExW]
1=LPCWSTR lpszUsername
2=LPCWSTR lpszDomain
3=LPCWSTR lpszPassword
4=DWORD dwLogonType
5=DWORD dwLogonProvider
6=PHANDLE phToken
7=PSID *ppLogonSid
8=PVOID *ppProfileBuffer
9=LPDWORD pdwProfileLength
10=PQUOTA_LIMITS pQuotaLimits
ParamCount=10
@=LogonUserExW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
[ImpersonateLoggedOnUser]
1=HANDLE hToken
ParamCount=1
@=ImpersonateLoggedOnUser(HANDLE hToken);
[CreateProcessAsUserA]
1=HANDLE hToken
2=LPCSTR lpApplicationName
3=LPSTR lpCommandLine
4=LPSECURITY_ATTRIBUTES lpProcessAttributes
5=LPSECURITY_ATTRIBUTES lpThreadAttributes
6=BOOL bInheritHandles
7=DWORD dwCreationFlags
8=LPVOID lpEnvironment
9=LPCSTR lpCurrentDirectory
10=LPSTARTUPINFOA lpStartupInfo
11=LPPROCESS_INFORMATION lpProcessInformation
ParamCount=11
@=CreateProcessAsUserA(HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
[CreateProcessAsUserW]
1=HANDLE hToken
2=LPCWSTR lpApplicationName
3=LPWSTR lpCommandLine
4=LPSECURITY_ATTRIBUTES lpProcessAttributes
5=LPSECURITY_ATTRIBUTES lpThreadAttributes
6=BOOL bInheritHandles
7=DWORD dwCreationFlags
8=LPVOID lpEnvironment
9=LPCWSTR lpCurrentDirectory
10=LPSTARTUPINFOW lpStartupInfo
11=LPPROCESS_INFORMATION lpProcessInformation
ParamCount=11
@=CreateProcessAsUserW(HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
[CreateProcessWithLogonW]
1=LPCWSTR lpUsername
2=LPCWSTR lpDomain
3=LPCWSTR lpPassword
4=DWORD dwLogonFlags
5=LPCWSTR lpApplicationName
6=LPWSTR lpCommandLine
7=DWORD dwCreationFlags
8=LPVOID lpEnvironment
9=LPCWSTR lpCurrentDirectory
10=LPSTARTUPINFOW lpStartupInfo
11=LPPROCESS_INFORMATION lpProcessInformation
ParamCount=11
@=CreateProcessWithLogonW(LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
[CreateProcessWithTokenW]
1=HANDLE hToken
2=DWORD dwLogonFlags
3=LPCWSTR lpApplicationName
4=LPWSTR lpCommandLine
5=DWORD dwCreationFlags
6=LPVOID lpEnvironment
7=LPCWSTR lpCurrentDirectory
8=LPSTARTUPINFOW lpStartupInfo
9=LPPROCESS_INFORMATION lpProcessInformation
ParamCount=9
@=CreateProcessWithTokenW(HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
[ImpersonateAnonymousToken]
1=HANDLE ThreadHandle
ParamCount=1
@=ImpersonateAnonymousToken(HANDLE ThreadHandle);
[DuplicateTokenEx]
1=HANDLE hExistingToken
2=DWORD dwDesiredAccess
3=LPSECURITY_ATTRIBUTES lpTokenAttributes
4=SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
5=TOKEN_TYPE TokenType
6=PHANDLE phNewToken
ParamCount=6
@=DuplicateTokenEx(HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
[CreateRestrictedToken]
1=HANDLE ExistingTokenHandle
2=DWORD Flags
3=DWORD DisableSidCount
4=PSID_AND_ATTRIBUTES SidsToDisable
5=DWORD DeletePrivilegeCount
6=PLUID_AND_ATTRIBUTES PrivilegesToDelete
7=DWORD RestrictedSidCount
8=PSID_AND_ATTRIBUTES SidsToRestrict
9=PHANDLE NewTokenHandle
ParamCount=9
@=CreateRestrictedToken(HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle);
[IsTokenRestricted]
1=HANDLE TokenHandle
ParamCount=1
@=IsTokenRestricted(HANDLE TokenHandle);
[IsTokenUntrusted]
1=HANDLE TokenHandle
ParamCount=1
@=IsTokenUntrusted(HANDLE TokenHandle);
[CheckTokenMembership]
1=HANDLE TokenHandle
2=PSID SidToCheck
3=PBOOL IsMember
ParamCount=3
@=CheckTokenMembership(HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember);
[RegisterWaitForSingleObject]
1=PHANDLE phNewWaitObject
2=HANDLE hObject
3=WAITORTIMERCALLBACK Callback
4=PVOID Context
5=ULONG dwMilliseconds
6=ULONG dwFlags
ParamCount=6
@=RegisterWaitForSingleObject(PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
[RegisterWaitForSingleObjectEx]
1=HANDLE hObject
2=WAITORTIMERCALLBACK Callback
3=PVOID Context
4=ULONG dwMilliseconds
5=ULONG dwFlags
ParamCount=5
@=RegisterWaitForSingleObjectEx(HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
[UnregisterWait]
1=HANDLE WaitHandle
ParamCount=1
@=UnregisterWait(HANDLE WaitHandle);
[UnregisterWaitEx]
1=HANDLE WaitHandle
2=HANDLE CompletionEvent
ParamCount=2
@=UnregisterWaitEx(HANDLE WaitHandle, HANDLE CompletionEvent);
[QueueUserWorkItem]
1=LPTHREAD_START_ROUTINE Function
2=PVOID Context
3=ULONG Flags
ParamCount=3
@=QueueUserWorkItem(LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags);
[BindIoCompletionCallback]
1=HANDLE FileHandle
2=LPOVERLAPPED_COMPLETION_ROUTINE Function
3=ULONG Flags
ParamCount=3
@=BindIoCompletionCallback(HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags);
[CreateTimerQueue]
ParamCount=0
@=CreateTimerQueue();
[CreateTimerQueueTimer]
1=PHANDLE phNewTimer
2=HANDLE TimerQueue
3=WAITORTIMERCALLBACK Callback
4=PVOID Parameter
5=DWORD DueTime
6=DWORD Period
7=ULONG Flags
ParamCount=7
@=CreateTimerQueueTimer(PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
[ChangeTimerQueueTimer]
1=HANDLE TimerQueue
2=HANDLE Timer
3=ULONG DueTime
4=ULONG Period
ParamCount=4
@=ChangeTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period);
[DeleteTimerQueueTimer]
1=HANDLE TimerQueue
2=HANDLE Timer
3=HANDLE CompletionEvent
ParamCount=3
@=DeleteTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent);
[DeleteTimerQueueEx]
1=HANDLE TimerQueue
2=HANDLE CompletionEvent
ParamCount=2
@=DeleteTimerQueueEx(HANDLE TimerQueue, HANDLE CompletionEvent);
[SetTimerQueueTimer]
1=HANDLE TimerQueue
2=WAITORTIMERCALLBACK Callback
3=PVOID Parameter
4=DWORD DueTime
5=DWORD Period
6=BOOL PreferIo
ParamCount=6
@=SetTimerQueueTimer(HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, BOOL PreferIo);
[CancelTimerQueueTimer]
1=HANDLE TimerQueue
2=HANDLE Timer
ParamCount=2
@=CancelTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer);
[DeleteTimerQueue]
1=HANDLE TimerQueue
ParamCount=1
@=DeleteTimerQueue(HANDLE TimerQueue);
[CreateThreadpool]
1=PVOID reserved
ParamCount=1
@=CreateThreadpool(PVOID reserved);
[SetThreadpoolThreadMaximum]
1=PTP_POOL ptpp
2=DWORD cthrdMost
ParamCount=2
@=SetThreadpoolThreadMaximum(PTP_POOL ptpp, DWORD cthrdMost);
[SetThreadpoolThreadMinimum]
1=PTP_POOL ptpp
2=DWORD cthrdMic
ParamCount=2
@=SetThreadpoolThreadMinimum(PTP_POOL ptpp, DWORD cthrdMic);
[SetThreadpoolStackInformation]
1=PTP_POOL ptpp
2=PTP_POOL_STACK_INFORMATION ptpsi
ParamCount=2
@=SetThreadpoolStackInformation(PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi);
[QueryThreadpoolStackInformation]
1=PTP_POOL ptpp
2=PTP_POOL_STACK_INFORMATION ptpsi
ParamCount=2
@=QueryThreadpoolStackInformation(PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi);
[CloseThreadpool]
1=PTP_POOL ptpp
ParamCount=1
@=CloseThreadpool(PTP_POOL ptpp);
[CreateThreadpoolCleanupGroup]
ParamCount=0
@=CreateThreadpoolCleanupGroup();
[CloseThreadpoolCleanupGroupMembers]
1=PTP_CLEANUP_GROUP ptpcg
2=BOOL fCancelPendingCallbacks
3=PVOID pvCleanupContext
ParamCount=3
@=CloseThreadpoolCleanupGroupMembers(PTP_CLEANUP_GROUP ptpcg, BOOL fCancelPendingCallbacks, PVOID pvCleanupContext);
[CloseThreadpoolCleanupGroup]
1=PTP_CLEANUP_GROUP ptpcg
ParamCount=1
@=CloseThreadpoolCleanupGroup(PTP_CLEANUP_GROUP ptpcg);
[SetEventWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=HANDLE evt
ParamCount=2
@=SetEventWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HANDLE evt);
[ReleaseSemaphoreWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=HANDLE sem
3=DWORD crel
ParamCount=3
@=ReleaseSemaphoreWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HANDLE sem, DWORD crel);
[ReleaseMutexWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=HANDLE mut
ParamCount=2
@=ReleaseMutexWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HANDLE mut);
[LeaveCriticalSectionWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=PCRITICAL_SECTION pcs
ParamCount=2
@=LeaveCriticalSectionWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, PCRITICAL_SECTION pcs);
[FreeLibraryWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=HMODULE mod
ParamCount=2
@=FreeLibraryWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci, HMODULE mod);
[CallbackMayRunLong]
1=PTP_CALLBACK_INSTANCE pci
ParamCount=1
@=CallbackMayRunLong(PTP_CALLBACK_INSTANCE pci);
[DisassociateCurrentThreadFromCallback]
1=PTP_CALLBACK_INSTANCE pci
ParamCount=1
@=DisassociateCurrentThreadFromCallback(PTP_CALLBACK_INSTANCE pci);
[TrySubmitThreadpoolCallback]
1=PTP_SIMPLE_CALLBACK pfns
2=PVOID pv
3=PTP_CALLBACK_ENVIRON pcbe
ParamCount=3
@=TrySubmitThreadpoolCallback(PTP_SIMPLE_CALLBACK pfns, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
[CreateThreadpoolWork]
1=PTP_WORK_CALLBACK pfnwk
2=PVOID pv
3=PTP_CALLBACK_ENVIRON pcbe
ParamCount=3
@=CreateThreadpoolWork(PTP_WORK_CALLBACK pfnwk, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
[SubmitThreadpoolWork]
1=PTP_WORK pwk
ParamCount=1
@=SubmitThreadpoolWork(PTP_WORK pwk);
[WaitForThreadpoolWorkCallbacks]
1=PTP_WORK pwk
2=BOOL fCancelPendingCallbacks
ParamCount=2
@=WaitForThreadpoolWorkCallbacks(PTP_WORK pwk, BOOL fCancelPendingCallbacks);
[CloseThreadpoolWork]
1=PTP_WORK pwk
ParamCount=1
@=CloseThreadpoolWork(PTP_WORK pwk);
[CreateThreadpoolTimer]
1=PTP_TIMER_CALLBACK pfnti
2=PVOID pv
3=PTP_CALLBACK_ENVIRON pcbe
ParamCount=3
@=CreateThreadpoolTimer(PTP_TIMER_CALLBACK pfnti, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
[SetThreadpoolTimer]
1=PTP_TIMER pti
2=PFILETIME pftDueTime
3=DWORD msPeriod
4=DWORD msWindowLength
ParamCount=4
@=SetThreadpoolTimer(PTP_TIMER pti, PFILETIME pftDueTime, DWORD msPeriod, DWORD msWindowLength);
[IsThreadpoolTimerSet]
1=PTP_TIMER pti
ParamCount=1
@=IsThreadpoolTimerSet(PTP_TIMER pti);
[WaitForThreadpoolTimerCallbacks]
1=PTP_TIMER pti
2=BOOL fCancelPendingCallbacks
ParamCount=2
@=WaitForThreadpoolTimerCallbacks(PTP_TIMER pti, BOOL fCancelPendingCallbacks);
[CloseThreadpoolTimer]
1=PTP_TIMER pti
ParamCount=1
@=CloseThreadpoolTimer(PTP_TIMER pti);
[CreateThreadpoolWait]
1=PTP_WAIT_CALLBACK pfnwa
2=PVOID pv
3=PTP_CALLBACK_ENVIRON pcbe
ParamCount=3
@=CreateThreadpoolWait(PTP_WAIT_CALLBACK pfnwa, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
[SetThreadpoolWait]
1=PTP_WAIT pwa
2=HANDLE h
3=PFILETIME pftTimeout
ParamCount=3
@=SetThreadpoolWait(PTP_WAIT pwa, HANDLE h, PFILETIME pftTimeout);
[WaitForThreadpoolWaitCallbacks]
1=PTP_WAIT pwa
2=BOOL fCancelPendingCallbacks
ParamCount=2
@=WaitForThreadpoolWaitCallbacks(PTP_WAIT pwa, BOOL fCancelPendingCallbacks);
[CloseThreadpoolWait]
1=PTP_WAIT pwa
ParamCount=1
@=CloseThreadpoolWait(PTP_WAIT pwa);
[CreateThreadpoolIo]
1=HANDLE fl
2=PTP_WIN32_IO_CALLBACK pfnio
3=PVOID pv
4=PTP_CALLBACK_ENVIRON pcbe
ParamCount=4
@=CreateThreadpoolIo(HANDLE fl, PTP_WIN32_IO_CALLBACK pfnio, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
[StartThreadpoolIo]
1=PTP_IO pio
ParamCount=1
@=StartThreadpoolIo(PTP_IO pio);
[CancelThreadpoolIo]
1=PTP_IO pio
ParamCount=1
@=CancelThreadpoolIo(PTP_IO pio);
[WaitForThreadpoolIoCallbacks]
1=PTP_IO pio
2=BOOL fCancelPendingCallbacks
ParamCount=2
@=WaitForThreadpoolIoCallbacks(PTP_IO pio, BOOL fCancelPendingCallbacks);
[CloseThreadpoolIo]
1=PTP_IO pio
ParamCount=1
@=CloseThreadpoolIo(PTP_IO pio);
[CreatePrivateNamespaceA]
1=LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes
2=LPVOID lpBoundaryDescriptor
3=LPCSTR lpAliasPrefix
ParamCount=3
@=CreatePrivateNamespaceA(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
[CreatePrivateNamespaceW]
1=LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes
2=LPVOID lpBoundaryDescriptor
3=LPCWSTR lpAliasPrefix
ParamCount=3
@=CreatePrivateNamespaceW(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);
[OpenPrivateNamespaceA]
1=LPVOID lpBoundaryDescriptor
2=LPCSTR lpAliasPrefix
ParamCount=2
@=OpenPrivateNamespaceA(LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix);
[OpenPrivateNamespaceW]
1=LPVOID lpBoundaryDescriptor
2=LPCWSTR lpAliasPrefix
ParamCount=2
@=OpenPrivateNamespaceW(LPVOID lpBoundaryDescriptor, LPCWSTR lpAliasPrefix);
[ClosePrivateNamespace]
1=HANDLE Handle
2=ULONG Flags
ParamCount=2
@=ClosePrivateNamespace(HANDLE Handle, ULONG Flags);
[CreateBoundaryDescriptorA]
1=LPCSTR Name
2=ULONG Flags
ParamCount=2
@=CreateBoundaryDescriptorA(LPCSTR Name, ULONG Flags);
[CreateBoundaryDescriptorW]
1=LPCWSTR Name
2=ULONG Flags
ParamCount=2
@=CreateBoundaryDescriptorW(LPCWSTR Name, ULONG Flags);
[AddSIDToBoundaryDescriptor]
1=HANDLE *BoundaryDescriptor
2=PSID RequiredSid
ParamCount=2
@=AddSIDToBoundaryDescriptor(HANDLE *BoundaryDescriptor, PSID RequiredSid);
[AddIntegrityLabelToBoundaryDescriptor]
1=HANDLE *BoundaryDescriptor
2=PSID IntegrityLabel
ParamCount=2
@=AddIntegrityLabelToBoundaryDescriptor(HANDLE *BoundaryDescriptor, PSID IntegrityLabel);
[DeleteBoundaryDescriptor]
1=HANDLE BoundaryDescriptor
ParamCount=1
@=DeleteBoundaryDescriptor(HANDLE BoundaryDescriptor);
[GetCurrentHwProfileA]
1=LPHW_PROFILE_INFOA lpHwProfileInfo
ParamCount=1
@=GetCurrentHwProfileA(LPHW_PROFILE_INFOA lpHwProfileInfo);
[GetCurrentHwProfileW]
1=LPHW_PROFILE_INFOW lpHwProfileInfo
ParamCount=1
@=GetCurrentHwProfileW(LPHW_PROFILE_INFOW lpHwProfileInfo);
[QueryPerformanceCounter]
1=LARGE_INTEGER *lpPerformanceCount
ParamCount=1
@=QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount);
[QueryPerformanceFrequency]
1=LARGE_INTEGER *lpFrequency
ParamCount=1
@=QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency);
[GetVersionExA]
1=LPOSVERSIONINFOA lpVersionInformation
ParamCount=1
@=GetVersionExA(LPOSVERSIONINFOA lpVersionInformation);
[GetVersionExW]
1=LPOSVERSIONINFOW lpVersionInformation
ParamCount=1
@=GetVersionExW(LPOSVERSIONINFOW lpVersionInformation);
[VerifyVersionInfoA]
1=LPOSVERSIONINFOEXA lpVersionInformation
2=DWORD dwTypeMask
3=DWORDLONG dwlConditionMask
ParamCount=3
@=VerifyVersionInfoA(LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
[VerifyVersionInfoW]
1=LPOSVERSIONINFOEXW lpVersionInformation
2=DWORD dwTypeMask
3=DWORDLONG dwlConditionMask
ParamCount=3
@=VerifyVersionInfoW(LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
[GetProductInfo]
1=DWORD dwOSMajorVersion
2=DWORD dwOSMinorVersion
3=DWORD dwSpMajorVersion
4=DWORD dwSpMinorVersion
5=PDWORD pdwReturnedProductType
ParamCount=5
@=GetProductInfo(DWORD dwOSMajorVersion, DWORD dwOSMinorVersion, DWORD dwSpMajorVersion, DWORD dwSpMinorVersion, PDWORD pdwReturnedProductType);
[GetSystemPowerStatus]
1=LPSYSTEM_POWER_STATUS lpSystemPowerStatus
ParamCount=1
@=GetSystemPowerStatus(LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
[SetSystemPowerState]
1=BOOL fSuspend
2=BOOL fForce
ParamCount=2
@=SetSystemPowerState(BOOL fSuspend, BOOL fForce);
[AllocateUserPhysicalPages]
1=HANDLE hProcess
2=PULONG_PTR NumberOfPages
3=PULONG_PTR PageArray
ParamCount=3
@=AllocateUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
[AllocateUserPhysicalPagesNuma]
1=HANDLE hProcess
2=PULONG_PTR NumberOfPages
3=PULONG_PTR PageArray
4=DWORD nndPreferred
ParamCount=4
@=AllocateUserPhysicalPagesNuma(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray, DWORD nndPreferred);
[FreeUserPhysicalPages]
1=HANDLE hProcess
2=PULONG_PTR NumberOfPages
3=PULONG_PTR PageArray
ParamCount=3
@=FreeUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
[MapUserPhysicalPages]
1=PVOID VirtualAddress
2=ULONG_PTR NumberOfPages
3=PULONG_PTR PageArray
ParamCount=3
@=MapUserPhysicalPages(PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
[MapUserPhysicalPagesScatter]
1=PVOID *VirtualAddresses
2=ULONG_PTR NumberOfPages
3=PULONG_PTR PageArray
ParamCount=3
@=MapUserPhysicalPagesScatter(PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
[CreateJobObjectA]
1=LPSECURITY_ATTRIBUTES lpJobAttributes
2=LPCSTR lpName
ParamCount=2
@=CreateJobObjectA(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName);
[CreateJobObjectW]
1=LPSECURITY_ATTRIBUTES lpJobAttributes
2=LPCWSTR lpName
ParamCount=2
@=CreateJobObjectW(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName);
[OpenJobObjectA]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCSTR lpName
ParamCount=3
@=OpenJobObjectA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName);
[OpenJobObjectW]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandle
3=LPCWSTR lpName
ParamCount=3
@=OpenJobObjectW(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName);
[AssignProcessToJobObject]
1=HANDLE hJob
2=HANDLE hProcess
ParamCount=2
@=AssignProcessToJobObject(HANDLE hJob, HANDLE hProcess);
[TerminateJobObject]
1=HANDLE hJob
2=UINT uExitCode
ParamCount=2
@=TerminateJobObject(HANDLE hJob, UINT uExitCode);
[QueryInformationJobObject]
1=HANDLE hJob
2=JOBOBJECTINFOCLASS JobObjectInformationClass
3=LPVOID lpJobObjectInformation
4=DWORD cbJobObjectInformationLength
5=LPDWORD lpReturnLength
ParamCount=5
@=QueryInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength);
[SetInformationJobObject]
1=HANDLE hJob
2=JOBOBJECTINFOCLASS JobObjectInformationClass
3=LPVOID lpJobObjectInformation
4=DWORD cbJobObjectInformationLength
ParamCount=4
@=SetInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength);
[IsProcessInJob]
1=HANDLE ProcessHandle
2=HANDLE JobHandle
3=PBOOL Result
ParamCount=3
@=IsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result);
[CreateJobSet]
1=ULONG NumJob
2=PJOB_SET_ARRAY UserJobSet
3=ULONG Flags
ParamCount=3
@=CreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
[AddVectoredExceptionHandler]
1=ULONG First
2=PVECTORED_EXCEPTION_HANDLER Handler
ParamCount=2
@=AddVectoredExceptionHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
[RemoveVectoredExceptionHandler]
1=PVOID Handle
ParamCount=1
@=RemoveVectoredExceptionHandler(PVOID Handle);
[AddVectoredContinueHandler]
1=ULONG First
2=PVECTORED_EXCEPTION_HANDLER Handler
ParamCount=2
@=AddVectoredContinueHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
[RemoveVectoredContinueHandler]
1=PVOID Handle
ParamCount=1
@=RemoveVectoredContinueHandler(PVOID Handle);
[FindFirstVolumeA]
1=LPSTR lpszVolumeName
2=DWORD cchBufferLength
ParamCount=2
@=FindFirstVolumeA(LPSTR lpszVolumeName, DWORD cchBufferLength);
[FindFirstVolumeW]
1=LPWSTR lpszVolumeName
2=DWORD cchBufferLength
ParamCount=2
@=FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength);
[FindNextVolumeA]
1=HANDLE hFindVolume
2=LPSTR lpszVolumeName
3=DWORD cchBufferLength
ParamCount=3
@=FindNextVolumeA(HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength);
[FindNextVolumeW]
1=HANDLE hFindVolume
2=LPWSTR lpszVolumeName
3=DWORD cchBufferLength
ParamCount=3
@=FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength);
[FindVolumeClose]
1=HANDLE hFindVolume
ParamCount=1
@=FindVolumeClose(HANDLE hFindVolume);
[FindFirstVolumeMountPointA]
1=LPCSTR lpszRootPathName
2=LPSTR lpszVolumeMountPoint
3=DWORD cchBufferLength
ParamCount=3
@=FindFirstVolumeMountPointA(LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
[FindFirstVolumeMountPointW]
1=LPCWSTR lpszRootPathName
2=LPWSTR lpszVolumeMountPoint
3=DWORD cchBufferLength
ParamCount=3
@=FindFirstVolumeMountPointW(LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
[FindNextVolumeMountPointA]
1=HANDLE hFindVolumeMountPoint
2=LPSTR lpszVolumeMountPoint
3=DWORD cchBufferLength
ParamCount=3
@=FindNextVolumeMountPointA(HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
[FindNextVolumeMountPointW]
1=HANDLE hFindVolumeMountPoint
2=LPWSTR lpszVolumeMountPoint
3=DWORD cchBufferLength
ParamCount=3
@=FindNextVolumeMountPointW(HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
[FindVolumeMountPointClose]
1=HANDLE hFindVolumeMountPoint
ParamCount=1
@=FindVolumeMountPointClose(HANDLE hFindVolumeMountPoint);
[SetVolumeMountPointA]
1=LPCSTR lpszVolumeMountPoint
2=LPCSTR lpszVolumeName
ParamCount=2
@=SetVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName);
[SetVolumeMountPointW]
1=LPCWSTR lpszVolumeMountPoint
2=LPCWSTR lpszVolumeName
ParamCount=2
@=SetVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName);
[DeleteVolumeMountPointA]
1=LPCSTR lpszVolumeMountPoint
ParamCount=1
@=DeleteVolumeMountPointA(LPCSTR lpszVolumeMountPoint);
[DeleteVolumeMountPointW]
1=LPCWSTR lpszVolumeMountPoint
ParamCount=1
@=DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint);
[GetVolumeNameForVolumeMountPointA]
1=LPCSTR lpszVolumeMountPoint
2=LPSTR lpszVolumeName
3=DWORD cchBufferLength
ParamCount=3
@=GetVolumeNameForVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength);
[GetVolumeNameForVolumeMountPointW]
1=LPCWSTR lpszVolumeMountPoint
2=LPWSTR lpszVolumeName
3=DWORD cchBufferLength
ParamCount=3
@=GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
[GetVolumePathNameA]
1=LPCSTR lpszFileName
2=LPSTR lpszVolumePathName
3=DWORD cchBufferLength
ParamCount=3
@=GetVolumePathNameA(LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength);
[GetVolumePathNameW]
1=LPCWSTR lpszFileName
2=LPWSTR lpszVolumePathName
3=DWORD cchBufferLength
ParamCount=3
@=GetVolumePathNameW(LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);
[GetVolumePathNamesForVolumeNameA]
1=LPCSTR lpszVolumeName
2=LPCH lpszVolumePathNames
3=DWORD cchBufferLength
4=PDWORD lpcchReturnLength
ParamCount=4
@=GetVolumePathNamesForVolumeNameA(LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
[GetVolumePathNamesForVolumeNameW]
1=LPCWSTR lpszVolumeName
2=LPWCH lpszVolumePathNames
3=DWORD cchBufferLength
4=PDWORD lpcchReturnLength
ParamCount=4
@=GetVolumePathNamesForVolumeNameW(LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
[CreateActCtxA]
1=PCACTCTXA pActCtx
ParamCount=1
@=CreateActCtxA(PCACTCTXA pActCtx);
[CreateActCtxW]
1=PCACTCTXW pActCtx
ParamCount=1
@=CreateActCtxW(PCACTCTXW pActCtx);
[AddRefActCtx]
1=HANDLE hActCtx
ParamCount=1
@=AddRefActCtx(HANDLE hActCtx);
[ReleaseActCtx]
1=HANDLE hActCtx
ParamCount=1
@=ReleaseActCtx(HANDLE hActCtx);
[ZombifyActCtx]
1=HANDLE hActCtx
ParamCount=1
@=ZombifyActCtx(HANDLE hActCtx);
[ActivateActCtx]
1=HANDLE hActCtx
2=ULONG_PTR *lpCookie
ParamCount=2
@=ActivateActCtx(HANDLE hActCtx, ULONG_PTR *lpCookie);
[DeactivateActCtx]
1=DWORD dwFlags
2=ULONG_PTR ulCookie
ParamCount=2
@=DeactivateActCtx(DWORD dwFlags, ULONG_PTR ulCookie);
[GetCurrentActCtx]
1=HANDLE *lphActCtx
ParamCount=1
@=GetCurrentActCtx(HANDLE *lphActCtx);
[FindActCtxSectionStringA]
1=DWORD dwFlags
2=GUID *lpExtensionGuid
3=ULONG ulSectionId
4=LPCSTR lpStringToFind
5=PACTCTX_SECTION_KEYED_DATA ReturnedData
ParamCount=5
@=FindActCtxSectionStringA(DWORD dwFlags, GUID *lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
[FindActCtxSectionStringW]
1=DWORD dwFlags
2=GUID *lpExtensionGuid
3=ULONG ulSectionId
4=LPCWSTR lpStringToFind
5=PACTCTX_SECTION_KEYED_DATA ReturnedData
ParamCount=5
@=FindActCtxSectionStringW(DWORD dwFlags, GUID *lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
[FindActCtxSectionGuid]
1=DWORD dwFlags
2=GUID *lpExtensionGuid
3=ULONG ulSectionId
4=GUID *lpGuidToFind
5=PACTCTX_SECTION_KEYED_DATA ReturnedData
ParamCount=5
@=FindActCtxSectionGuid(DWORD dwFlags, GUID *lpExtensionGuid, ULONG ulSectionId, GUID *lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
[QueryActCtxW]
1=DWORD dwFlags
2=HANDLE hActCtx
3=PVOID pvSubInstance
4=ULONG ulInfoClass
5=PVOID pvBuffer
6=SIZE_T cbBuffer
7=SIZE_T *pcbWrittenOrRequired
ParamCount=7
@=QueryActCtxW(DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired);
[ProcessIdToSessionId]
1=DWORD dwProcessId
2=DWORD *pSessionId
ParamCount=2
@=ProcessIdToSessionId(DWORD dwProcessId, DWORD *pSessionId);
[WTSGetActiveConsoleSessionId]
ParamCount=0
@=WTSGetActiveConsoleSessionId();
[IsWow64Process]
1=HANDLE hProcess
2=PBOOL Wow64Process
ParamCount=2
@=IsWow64Process(HANDLE hProcess, PBOOL Wow64Process);
[GetLogicalProcessorInformation]
1=PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer
2=PDWORD ReturnedLength
ParamCount=2
@=GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength);
[GetLogicalProcessorInformationEx]
1=LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType
2=PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer
3=PDWORD ReturnedLength
ParamCount=3
@=GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer, PDWORD ReturnedLength);
[GetActiveProcessorGroupCount]
ParamCount=0
@=GetActiveProcessorGroupCount();
[GetMaximumProcessorGroupCount]
ParamCount=0
@=GetMaximumProcessorGroupCount();
[GetActiveProcessorCount]
1=WORD GroupNumber
ParamCount=1
@=GetActiveProcessorCount(WORD GroupNumber);
[GetMaximumProcessorCount]
1=WORD GroupNumber
ParamCount=1
@=GetMaximumProcessorCount(WORD GroupNumber);
[GetNumaHighestNodeNumber]
1=PULONG HighestNodeNumber
ParamCount=1
@=GetNumaHighestNodeNumber(PULONG HighestNodeNumber);
[GetNumaProcessorNode]
1=UCHAR Processor
2=PUCHAR NodeNumber
ParamCount=2
@=GetNumaProcessorNode(UCHAR Processor, PUCHAR NodeNumber);
[GetNumaNodeNumberFromHandle]
1=HANDLE hFile
2=PUSHORT NodeNumber
ParamCount=2
@=GetNumaNodeNumberFromHandle(HANDLE hFile, PUSHORT NodeNumber);
[GetNumaProcessorNodeEx]
1=PPROCESSOR_NUMBER Processor
2=PUSHORT NodeNumber
ParamCount=2
@=GetNumaProcessorNodeEx(PPROCESSOR_NUMBER Processor, PUSHORT NodeNumber);
[GetNumaNodeProcessorMask]
1=UCHAR Node
2=PULONGLONG ProcessorMask
ParamCount=2
@=GetNumaNodeProcessorMask(UCHAR Node, PULONGLONG ProcessorMask);
[GetNumaNodeProcessorMaskEx]
1=USHORT Node
2=PGROUP_AFFINITY ProcessorMask
ParamCount=2
@=GetNumaNodeProcessorMaskEx(USHORT Node, PGROUP_AFFINITY ProcessorMask);
[GetNumaAvailableMemoryNode]
1=UCHAR Node
2=PULONGLONG AvailableBytes
ParamCount=2
@=GetNumaAvailableMemoryNode(UCHAR Node, PULONGLONG AvailableBytes);
[GetNumaAvailableMemoryNodeEx]
1=USHORT Node
2=PULONGLONG AvailableBytes
ParamCount=2
@=GetNumaAvailableMemoryNodeEx(USHORT Node, PULONGLONG AvailableBytes);
[GetNumaProximityNode]
1=ULONG ProximityId
2=PUCHAR NodeNumber
ParamCount=2
@=GetNumaProximityNode(ULONG ProximityId, PUCHAR NodeNumber);
[GetNumaProximityNodeEx]
1=ULONG ProximityId
2=PUSHORT NodeNumber
ParamCount=2
@=GetNumaProximityNodeEx(ULONG ProximityId, PUSHORT NodeNumber);
[RegisterApplicationRecoveryCallback]
1=APPLICATION_RECOVERY_CALLBACK pRecoveyCallback
2=PVOID pvParameter
3=DWORD dwPingInterval
4=DWORD dwFlags
ParamCount=4
@=RegisterApplicationRecoveryCallback(APPLICATION_RECOVERY_CALLBACK pRecoveyCallback, PVOID pvParameter, DWORD dwPingInterval, DWORD dwFlags);
[UnregisterApplicationRecoveryCallback]
ParamCount=0
@=UnregisterApplicationRecoveryCallback();
[RegisterApplicationRestart]
1=PCWSTR pwzCommandline
2=DWORD dwFlags
ParamCount=2
@=RegisterApplicationRestart(PCWSTR pwzCommandline, DWORD dwFlags);
[UnregisterApplicationRestart]
ParamCount=0
@=UnregisterApplicationRestart();
[GetApplicationRecoveryCallback]
1=HANDLE hProcess
2=APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback
3=PVOID* ppvParameter
4=PDWORD pdwPingInterval
5=PDWORD pdwFlags
ParamCount=5
@=GetApplicationRecoveryCallback(HANDLE hProcess, APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback, PVOID* ppvParameter, PDWORD pdwPingInterval, PDWORD pdwFlags);
[GetApplicationRestartSettings]
1=HANDLE hProcess
2=PWSTR pwzCommandline
3=PDWORD pcchSize
4=PDWORD pdwFlags
ParamCount=4
@=GetApplicationRestartSettings(HANDLE hProcess, PWSTR pwzCommandline, PDWORD pcchSize, PDWORD pdwFlags);
[ApplicationRecoveryInProgress]
1=PBOOL pbCancelled
ParamCount=1
@=ApplicationRecoveryInProgress(PBOOL pbCancelled);
[ApplicationRecoveryFinished]
1=BOOL bSuccess
ParamCount=1
@=ApplicationRecoveryFinished(BOOL bSuccess);
[SetFileInformationByHandle]
1=HANDLE hFile
2=FILE_INFO_BY_HANDLE_CLASS FileInformationClass
3=LPVOID lpFileInformation
4=DWORD dwBufferSize
ParamCount=4
@=SetFileInformationByHandle(HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize);
[GetFileInformationByHandleEx]
1=HANDLE hFile
2=FILE_INFO_BY_HANDLE_CLASS FileInformationClass
3=LPVOID lpFileInformation
4=DWORD dwBufferSize
ParamCount=4
@=GetFileInformationByHandleEx(HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize);
[OpenFileById]
1=HANDLE hVolumeHint
2=LPFILE_ID_DESCRIPTOR lpFileId
3=DWORD dwDesiredAccess
4=DWORD dwShareMode
5=LPSECURITY_ATTRIBUTES lpSecurityAttributes
6=DWORD dwFlagsAndAttributes
ParamCount=6
@=OpenFileById(HANDLE hVolumeHint, LPFILE_ID_DESCRIPTOR lpFileId, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwFlagsAndAttributes);
[CreateSymbolicLinkA]
1=LPCSTR lpSymlinkFileName
2=LPCSTR lpTargetFileName
3=DWORD dwFlags
ParamCount=3
@=CreateSymbolicLinkA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags);
[CreateSymbolicLinkW]
1=LPCWSTR lpSymlinkFileName
2=LPCWSTR lpTargetFileName
3=DWORD dwFlags
ParamCount=3
@=CreateSymbolicLinkW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags);
[CreateSymbolicLinkTransactedA]
1=LPCSTR lpSymlinkFileName
2=LPCSTR lpTargetFileName
3=DWORD dwFlags
4=HANDLE hTransaction
ParamCount=4
@=CreateSymbolicLinkTransactedA(LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction);
[CreateSymbolicLinkTransactedW]
1=LPCWSTR lpSymlinkFileName
2=LPCWSTR lpTargetFileName
3=DWORD dwFlags
4=HANDLE hTransaction
ParamCount=4
@=CreateSymbolicLinkTransactedW(LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction);
[GetFinalPathNameByHandleA]
1=HANDLE hFile
2=LPSTR lpszFilePath
3=DWORD cchFilePath
4=DWORD dwFlags
ParamCount=4
@=GetFinalPathNameByHandleA(HANDLE hFile, LPSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags);
[GetFinalPathNameByHandleW]
1=HANDLE hFile
2=LPWSTR lpszFilePath
3=DWORD cchFilePath
4=DWORD dwFlags
ParamCount=4
@=GetFinalPathNameByHandleW(HANDLE hFile, LPWSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags);
[QueryActCtxSettingsW]
1=DWORD dwFlags
2=HANDLE hActCtx
3=PCWSTR settingsNameSpace
4=PCWSTR settingName
5=PWSTR pvBuffer
6=SIZE_T dwBuffer
7=SIZE_T *pdwWrittenOrRequired
ParamCount=7
@=QueryActCtxSettingsW(DWORD dwFlags, HANDLE hActCtx, PCWSTR settingsNameSpace, PCWSTR settingName, PWSTR pvBuffer, SIZE_T dwBuffer, SIZE_T *pdwWrittenOrRequired);
[ReplacePartitionUnit]
1=PWSTR TargetPartition
2=PWSTR SparePartition
3=ULONG Flags
ParamCount=3
@=ReplacePartitionUnit(PWSTR TargetPartition, PWSTR SparePartition, ULONG Flags);
[AddSecureMemoryCacheCallback]
1=ULONG PSECURE_MEMORY_CACHE_CALLBACKpfnCallBack
ParamCount=1
@=AddSecureMemoryCacheCallback(ULONG PSECURE_MEMORY_CACHE_CALLBACKpfnCallBack);
[RemoveSecureMemoryCacheCallback]
1=ULONG PSECURE_MEMORY_CACHE_CALLBACKpfnCallBack
ParamCount=1
@=RemoveSecureMemoryCacheCallback(ULONG PSECURE_MEMORY_CACHE_CALLBACKpfnCallBack);
[CopyExtendedContext]
1=PCONTEXT_EX Destination
2=DWORD ContextFlags
3=PCONTEXT_EX Source
ParamCount=3
@=CopyExtendedContext(PCONTEXT_EX Destination, DWORD ContextFlags, PCONTEXT_EX Source);
[InitializeExtendedContext]
1=PVOID Context
2=DWORD ContextFlags
3=PCONTEXT_EX* ContextEx
ParamCount=3
@=InitializeExtendedContext(PVOID Context, DWORD ContextFlags, PCONTEXT_EX* ContextEx);
[GetEnabledExtendedFeatures]
1=DWORD64 FeatureMask
ParamCount=1
@=GetEnabledExtendedFeatures(DWORD64 FeatureMask);
[GetExtendedContextLength]
1=DWORD ContextFlags
2=PDWORD ContextLength
ParamCount=2
@=GetExtendedContextLength(DWORD ContextFlags, PDWORD ContextLength);
[GetExtendedFeaturesMask]
1=PCONTEXT_EX ContextEx
ParamCount=1
@=GetExtendedFeaturesMask(PCONTEXT_EX ContextEx);
[LocateExtendedFeature]
1=PCONTEXT_EX ContextEx
2=DWORD FeatureId
3=PDWORD Length
ParamCount=3
@=LocateExtendedFeature(PCONTEXT_EX ContextEx, DWORD FeatureId, PDWORD Length);
[LocateLegacyContext]
1=PCONTEXT_EX ContextEx
2=PDWORD Length
ParamCount=2
@=LocateLegacyContext(PCONTEXT_EX ContextEx, PDWORD Length);
[SetExtendedFeaturesMask]
1=PCONTEXT_EX ContextEx
2=DWORD64 FeatureMask
ParamCount=2
@=SetExtendedFeaturesMask(PCONTEXT_EX ContextEx, DWORD64 FeatureMask);
[EnableThreadProfiling]
1=HANDLE ThreadHandle
2=DWORD Flags
3=DWORD64 HardwareCounters
4=HANDLE *PerformanceDataHandle
ParamCount=4
@=EnableThreadProfiling(HANDLE ThreadHandle, DWORD Flags, DWORD64 HardwareCounters, HANDLE *PerformanceDataHandle);
[DisableThreadProfiling]
1=HANDLE PerformanceDataHandle
ParamCount=1
@=DisableThreadProfiling(HANDLE PerformanceDataHandle);
[QueryThreadProfiling]
1=HANDLE ThreadHandle
2=PBOOLEAN Enabled
ParamCount=2
@=QueryThreadProfiling(HANDLE ThreadHandle, PBOOLEAN Enabled);
[ReadThreadProfilingData]
1=HANDLE PerformanceDataHandle
2=DWORD Flags
3=PPERFORMANCE_DATA PerformanceData
ParamCount=3
@=ReadThreadProfilingData(HANDLE PerformanceDataHandle, DWORD Flags, PPERFORMANCE_DATA PerformanceData);
